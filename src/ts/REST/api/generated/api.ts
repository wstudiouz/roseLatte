/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from "./base";

/**
 *
 * @export
 * @interface About
 */
export interface About {
  /**
   *
   * @type {CustomComponentsHeroComponent}
   * @memberof About
   */
  Hero?: CustomComponentsHeroComponent;
  /**
   *
   * @type {AboutHeroBottomComponent}
   * @memberof About
   */
  HeroBottom?: AboutHeroBottomComponent;
  /**
   *
   * @type {AboutGetIdeasComponent}
   * @memberof About
   */
  GetIdeas?: AboutGetIdeasComponent;
  /**
   *
   * @type {AboutGetIdeasComponent}
   * @memberof About
   */
  SpecialDrinks?: AboutGetIdeasComponent;
  /**
   *
   * @type {AboutKitchenComponent}
   * @memberof About
   */
  Kitchen: AboutKitchenComponent;
  /**
   *
   * @type {string}
   * @memberof About
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof About
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof About
   */
  publishedAt?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof About
   */
  createdBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof About
   */
  updatedBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutLocalizations}
   * @memberof About
   */
  localizations?: AboutLocalizations;
  /**
   *
   * @type {string}
   * @memberof About
   */
  locale?: string;
}
/**
 *
 * @export
 * @interface AboutCreatedBy
 */
export interface AboutCreatedBy {
  /**
   *
   * @type {AboutCreatedByData}
   * @memberof AboutCreatedBy
   */
  data?: AboutCreatedByData;
}
/**
 *
 * @export
 * @interface AboutCreatedByData
 */
export interface AboutCreatedByData {
  /**
   *
   * @type {number}
   * @memberof AboutCreatedByData
   */
  id?: number;
  /**
   *
   * @type {object}
   * @memberof AboutCreatedByData
   */
  attributes?: object;
}
/**
 *
 * @export
 * @interface AboutGetIdeasComponent
 */
export interface AboutGetIdeasComponent {
  /**
   *
   * @type {number}
   * @memberof AboutGetIdeasComponent
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof AboutGetIdeasComponent
   */
  title_en?: string;
  /**
   *
   * @type {string}
   * @memberof AboutGetIdeasComponent
   */
  desc_en?: string;
  /**
   *
   * @type {string}
   * @memberof AboutGetIdeasComponent
   */
  title_cz?: string;
  /**
   *
   * @type {string}
   * @memberof AboutGetIdeasComponent
   */
  desc_cz?: string;
  /**
   *
   * @type {AboutHeroBottomComponentImg1}
   * @memberof AboutGetIdeasComponent
   */
  img?: AboutHeroBottomComponentImg1;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponent
 */
export interface AboutHeroBottomComponent {
  /**
   *
   * @type {number}
   * @memberof AboutHeroBottomComponent
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponent
   */
  text_en?: string;
  /**
   *
   * @type {AboutHeroBottomComponentImg1}
   * @memberof AboutHeroBottomComponent
   */
  img1?: AboutHeroBottomComponentImg1;
  /**
   *
   * @type {AboutHeroBottomComponentImg2}
   * @memberof AboutHeroBottomComponent
   */
  img2?: AboutHeroBottomComponentImg2;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponent
   */
  text_cz?: string;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg1
 */
export interface AboutHeroBottomComponentImg1 {
  /**
   *
   * @type {AboutHeroBottomComponentImg1Data}
   * @memberof AboutHeroBottomComponentImg1
   */
  data?: AboutHeroBottomComponentImg1Data;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg1Data
 */
export interface AboutHeroBottomComponentImg1Data {
  /**
   *
   * @type {number}
   * @memberof AboutHeroBottomComponentImg1Data
   */
  id?: number;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributes}
   * @memberof AboutHeroBottomComponentImg1Data
   */
  attributes?: AboutHeroBottomComponentImg1DataAttributes;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg1DataAttributes
 */
export interface AboutHeroBottomComponentImg1DataAttributes {
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributes
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributes
   */
  alternativeText?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributes
   */
  caption?: string;
  /**
   *
   * @type {number}
   * @memberof AboutHeroBottomComponentImg1DataAttributes
   */
  width?: number;
  /**
   *
   * @type {number}
   * @memberof AboutHeroBottomComponentImg1DataAttributes
   */
  height?: number;
  /**
   *
   * @type {any}
   * @memberof AboutHeroBottomComponentImg1DataAttributes
   */
  formats?: any;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributes
   */
  hash?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributes
   */
  ext?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributes
   */
  mime?: string;
  /**
   *
   * @type {number}
   * @memberof AboutHeroBottomComponentImg1DataAttributes
   */
  size?: number;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributes
   */
  url?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributes
   */
  previewUrl?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributes
   */
  provider?: string;
  /**
   *
   * @type {any}
   * @memberof AboutHeroBottomComponentImg1DataAttributes
   */
  provider_metadata?: any;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesRelated}
   * @memberof AboutHeroBottomComponentImg1DataAttributes
   */
  related?: AboutHeroBottomComponentImg1DataAttributesRelated;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesFolder}
   * @memberof AboutHeroBottomComponentImg1DataAttributes
   */
  folder?: AboutHeroBottomComponentImg1DataAttributesFolder;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributes
   */
  folderPath?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof AboutHeroBottomComponentImg1DataAttributes
   */
  createdBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof AboutHeroBottomComponentImg1DataAttributes
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg1DataAttributesFolder
 */
export interface AboutHeroBottomComponentImg1DataAttributesFolder {
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesFolderData}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolder
   */
  data?: AboutHeroBottomComponentImg1DataAttributesFolderData;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg1DataAttributesFolderData
 */
export interface AboutHeroBottomComponentImg1DataAttributesFolderData {
  /**
   *
   * @type {number}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderData
   */
  id?: number;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesFolderDataAttributes}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderData
   */
  attributes?: AboutHeroBottomComponentImg1DataAttributesFolderDataAttributes;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributes
 */
export interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributes {
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributes
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributes
   */
  pathId?: number;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributes
   */
  parent?: AboutCreatedBy;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesRelated}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributes
   */
  children?: AboutHeroBottomComponentImg1DataAttributesRelated;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFiles}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributes
   */
  files?: AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFiles;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributes
   */
  path?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributes
   */
  createdBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributes
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFiles
 */
export interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFiles {
  /**
   *
   * @type {Array<AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInner>}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFiles
   */
  data?: Array<AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInner>;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInner
 */
export interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInner {
  /**
   *
   * @type {number}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInner
   */
  id?: number;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInner
   */
  attributes?: AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
 */
export interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes {
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  alternativeText?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  caption?: string;
  /**
   *
   * @type {number}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  width?: number;
  /**
   *
   * @type {number}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  height?: number;
  /**
   *
   * @type {any}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  formats?: any;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  hash?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  ext?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  mime?: string;
  /**
   *
   * @type {number}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  size?: number;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  url?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  previewUrl?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  provider?: string;
  /**
   *
   * @type {any}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  provider_metadata?: any;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesRelated}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  related?: AboutHeroBottomComponentImg1DataAttributesRelated;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  folder?: AboutCreatedBy;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  folderPath?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  createdBy?: AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy
 */
export interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy {
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByData}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy
   */
  data?: AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByData;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByData
 */
export interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByData {
  /**
   *
   * @type {number}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByData
   */
  id?: number;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByData
   */
  attributes?: AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
 */
export interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes {
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
   */
  firstname?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
   */
  lastname?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
   */
  resetPasswordToken?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
   */
  registrationToken?: string;
  /**
   *
   * @type {boolean}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
   */
  isActive?: boolean;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRoles}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
   */
  roles?: AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRoles;
  /**
   *
   * @type {boolean}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
   */
  blocked?: boolean;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
   */
  preferedLanguage?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
   */
  createdBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRoles
 */
export interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRoles {
  /**
   *
   * @type {Array<AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInner>}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRoles
   */
  data?: Array<AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInner>;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInner
 */
export interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInner {
  /**
   *
   * @type {number}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInner
   */
  id?: number;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInner
   */
  attributes?: AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
 */
export interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes {
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  code?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  description?: string;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesRelated}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  users?: AboutHeroBottomComponentImg1DataAttributesRelated;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  permissions?: AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  createdBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions
 */
export interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions {
  /**
   *
   * @type {Array<AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner>}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions
   */
  data?: Array<AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner>;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner
 */
export interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner {
  /**
   *
   * @type {number}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner
   */
  id?: number;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner
   */
  attributes?: AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
 */
export interface AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes {
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  action?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  subject?: string;
  /**
   *
   * @type {any}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  properties?: any;
  /**
   *
   * @type {any}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  conditions?: any;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  role?: AboutCreatedBy;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  createdBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg1DataAttributesRelated
 */
export interface AboutHeroBottomComponentImg1DataAttributesRelated {
  /**
   *
   * @type {Array<AboutCreatedByData>}
   * @memberof AboutHeroBottomComponentImg1DataAttributesRelated
   */
  data?: Array<AboutCreatedByData>;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg2
 */
export interface AboutHeroBottomComponentImg2 {
  /**
   *
   * @type {AboutHeroBottomComponentImg2Data}
   * @memberof AboutHeroBottomComponentImg2
   */
  data?: AboutHeroBottomComponentImg2Data;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg2Data
 */
export interface AboutHeroBottomComponentImg2Data {
  /**
   *
   * @type {number}
   * @memberof AboutHeroBottomComponentImg2Data
   */
  id?: number;
  /**
   *
   * @type {AboutHeroBottomComponentImg2DataAttributes}
   * @memberof AboutHeroBottomComponentImg2Data
   */
  attributes?: AboutHeroBottomComponentImg2DataAttributes;
}
/**
 *
 * @export
 * @interface AboutHeroBottomComponentImg2DataAttributes
 */
export interface AboutHeroBottomComponentImg2DataAttributes {
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg2DataAttributes
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg2DataAttributes
   */
  alternativeText?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg2DataAttributes
   */
  caption?: string;
  /**
   *
   * @type {number}
   * @memberof AboutHeroBottomComponentImg2DataAttributes
   */
  width?: number;
  /**
   *
   * @type {number}
   * @memberof AboutHeroBottomComponentImg2DataAttributes
   */
  height?: number;
  /**
   *
   * @type {any}
   * @memberof AboutHeroBottomComponentImg2DataAttributes
   */
  formats?: any;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg2DataAttributes
   */
  hash?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg2DataAttributes
   */
  ext?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg2DataAttributes
   */
  mime?: string;
  /**
   *
   * @type {number}
   * @memberof AboutHeroBottomComponentImg2DataAttributes
   */
  size?: number;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg2DataAttributes
   */
  url?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg2DataAttributes
   */
  previewUrl?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg2DataAttributes
   */
  provider?: string;
  /**
   *
   * @type {any}
   * @memberof AboutHeroBottomComponentImg2DataAttributes
   */
  provider_metadata?: any;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesRelated}
   * @memberof AboutHeroBottomComponentImg2DataAttributes
   */
  related?: AboutHeroBottomComponentImg1DataAttributesRelated;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof AboutHeroBottomComponentImg2DataAttributes
   */
  folder?: AboutCreatedBy;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg2DataAttributes
   */
  folderPath?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg2DataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof AboutHeroBottomComponentImg2DataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof AboutHeroBottomComponentImg2DataAttributes
   */
  createdBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof AboutHeroBottomComponentImg2DataAttributes
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface AboutKitchenComponent
 */
export interface AboutKitchenComponent {
  /**
   *
   * @type {number}
   * @memberof AboutKitchenComponent
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof AboutKitchenComponent
   */
  title_en?: string;
  /**
   *
   * @type {string}
   * @memberof AboutKitchenComponent
   */
  title_cz?: string;
  /**
   *
   * @type {string}
   * @memberof AboutKitchenComponent
   */
  rightText_en?: string;
  /**
   *
   * @type {string}
   * @memberof AboutKitchenComponent
   */
  rightText_cz?: string;
  /**
   *
   * @type {AboutKitchenComponentImages}
   * @memberof AboutKitchenComponent
   */
  images?: AboutKitchenComponentImages;
}
/**
 *
 * @export
 * @interface AboutKitchenComponentImages
 */
export interface AboutKitchenComponentImages {
  /**
   *
   * @type {Array<AboutHeroBottomComponentImg2Data>}
   * @memberof AboutKitchenComponentImages
   */
  data?: Array<AboutHeroBottomComponentImg2Data>;
}
/**
 *
 * @export
 * @interface AboutListResponse
 */
export interface AboutListResponse {
  /**
   *
   * @type {Array<AboutListResponseDataItem>}
   * @memberof AboutListResponse
   */
  data?: Array<AboutListResponseDataItem>;
  /**
   *
   * @type {AboutLocalizationListResponseMeta}
   * @memberof AboutListResponse
   */
  meta?: AboutLocalizationListResponseMeta;
}
/**
 *
 * @export
 * @interface AboutListResponseDataItem
 */
export interface AboutListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof AboutListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {About}
   * @memberof AboutListResponseDataItem
   */
  attributes?: About;
}
/**
 *
 * @export
 * @interface AboutListResponseDataItemLocalized
 */
export interface AboutListResponseDataItemLocalized {
  /**
   *
   * @type {number}
   * @memberof AboutListResponseDataItemLocalized
   */
  id?: number;
  /**
   *
   * @type {About}
   * @memberof AboutListResponseDataItemLocalized
   */
  attributes?: About;
}
/**
 *
 * @export
 * @interface AboutLocalizationListResponse
 */
export interface AboutLocalizationListResponse {
  /**
   *
   * @type {Array<AboutListResponseDataItemLocalized>}
   * @memberof AboutLocalizationListResponse
   */
  data?: Array<AboutListResponseDataItemLocalized>;
  /**
   *
   * @type {AboutLocalizationListResponseMeta}
   * @memberof AboutLocalizationListResponse
   */
  meta?: AboutLocalizationListResponseMeta;
}
/**
 *
 * @export
 * @interface AboutLocalizationListResponseMeta
 */
export interface AboutLocalizationListResponseMeta {
  /**
   *
   * @type {AboutLocalizationListResponseMetaPagination}
   * @memberof AboutLocalizationListResponseMeta
   */
  pagination?: AboutLocalizationListResponseMetaPagination;
}
/**
 *
 * @export
 * @interface AboutLocalizationListResponseMetaPagination
 */
export interface AboutLocalizationListResponseMetaPagination {
  /**
   *
   * @type {number}
   * @memberof AboutLocalizationListResponseMetaPagination
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof AboutLocalizationListResponseMetaPagination
   */
  pageSize?: number;
  /**
   *
   * @type {number}
   * @memberof AboutLocalizationListResponseMetaPagination
   */
  pageCount?: number;
  /**
   *
   * @type {number}
   * @memberof AboutLocalizationListResponseMetaPagination
   */
  total?: number;
}
/**
 *
 * @export
 * @interface AboutLocalizationRequest
 */
export interface AboutLocalizationRequest {
  /**
   *
   * @type {CustomComponentsHeroComponent}
   * @memberof AboutLocalizationRequest
   */
  Hero?: CustomComponentsHeroComponent;
  /**
   *
   * @type {AboutHeroBottomComponent}
   * @memberof AboutLocalizationRequest
   */
  HeroBottom?: AboutHeroBottomComponent;
  /**
   *
   * @type {AboutGetIdeasComponent}
   * @memberof AboutLocalizationRequest
   */
  GetIdeas?: AboutGetIdeasComponent;
  /**
   *
   * @type {AboutGetIdeasComponent}
   * @memberof AboutLocalizationRequest
   */
  SpecialDrinks?: AboutGetIdeasComponent;
  /**
   *
   * @type {AboutKitchenComponent}
   * @memberof AboutLocalizationRequest
   */
  Kitchen: AboutKitchenComponent;
  /**
   *
   * @type {string}
   * @memberof AboutLocalizationRequest
   */
  locale: string;
}
/**
 *
 * @export
 * @interface AboutLocalizationResponse
 */
export interface AboutLocalizationResponse {
  /**
   *
   * @type {AboutResponseDataObjectLocalized}
   * @memberof AboutLocalizationResponse
   */
  data?: AboutResponseDataObjectLocalized;
  /**
   *
   * @type {object}
   * @memberof AboutLocalizationResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface AboutLocalizations
 */
export interface AboutLocalizations {
  /**
   *
   * @type {Array<About>}
   * @memberof AboutLocalizations
   */
  data?: Array<About>;
}
/**
 *
 * @export
 * @interface AboutRequest
 */
export interface AboutRequest {
  /**
   *
   * @type {AboutRequestData}
   * @memberof AboutRequest
   */
  data: AboutRequestData;
}
/**
 *
 * @export
 * @interface AboutRequestData
 */
export interface AboutRequestData {
  /**
   *
   * @type {CustomComponentsHeroComponent}
   * @memberof AboutRequestData
   */
  Hero?: CustomComponentsHeroComponent;
  /**
   *
   * @type {AboutHeroBottomComponent}
   * @memberof AboutRequestData
   */
  HeroBottom?: AboutHeroBottomComponent;
  /**
   *
   * @type {AboutGetIdeasComponent}
   * @memberof AboutRequestData
   */
  GetIdeas?: AboutGetIdeasComponent;
  /**
   *
   * @type {AboutGetIdeasComponent}
   * @memberof AboutRequestData
   */
  SpecialDrinks?: AboutGetIdeasComponent;
  /**
   *
   * @type {AboutKitchenComponent}
   * @memberof AboutRequestData
   */
  Kitchen: AboutKitchenComponent;
  /**
   *
   * @type {string}
   * @memberof AboutRequestData
   */
  locale?: string;
}
/**
 *
 * @export
 * @interface AboutResponse
 */
export interface AboutResponse {
  /**
   *
   * @type {AboutResponseDataObject}
   * @memberof AboutResponse
   */
  data?: AboutResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof AboutResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface AboutResponseDataObject
 */
export interface AboutResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof AboutResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {About}
   * @memberof AboutResponseDataObject
   */
  attributes?: About;
}
/**
 *
 * @export
 * @interface AboutResponseDataObjectLocalized
 */
export interface AboutResponseDataObjectLocalized {
  /**
   *
   * @type {number}
   * @memberof AboutResponseDataObjectLocalized
   */
  id?: number;
  /**
   *
   * @type {About}
   * @memberof AboutResponseDataObjectLocalized
   */
  attributes?: About;
}
/**
 *
 * @export
 * @interface AuthChangePasswordPostRequest
 */
export interface AuthChangePasswordPostRequest {
  /**
   *
   * @type {string}
   * @memberof AuthChangePasswordPostRequest
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof AuthChangePasswordPostRequest
   */
  currentPassword: string;
  /**
   *
   * @type {string}
   * @memberof AuthChangePasswordPostRequest
   */
  passwordConfirmation: string;
}
/**
 *
 * @export
 * @interface AuthForgotPasswordPost200Response
 */
export interface AuthForgotPasswordPost200Response {
  /**
   *
   * @type {string}
   * @memberof AuthForgotPasswordPost200Response
   */
  ok?: AuthForgotPasswordPost200ResponseOkEnum;
}

export const AuthForgotPasswordPost200ResponseOkEnum = {
  True: "true",
} as const;

export type AuthForgotPasswordPost200ResponseOkEnum =
  (typeof AuthForgotPasswordPost200ResponseOkEnum)[keyof typeof AuthForgotPasswordPost200ResponseOkEnum];

/**
 *
 * @export
 * @interface AuthForgotPasswordPostRequest
 */
export interface AuthForgotPasswordPostRequest {
  /**
   *
   * @type {string}
   * @memberof AuthForgotPasswordPostRequest
   */
  email?: string;
}
/**
 *
 * @export
 * @interface AuthLocalPostRequest
 */
export interface AuthLocalPostRequest {
  /**
   *
   * @type {string}
   * @memberof AuthLocalPostRequest
   */
  identifier?: string;
  /**
   *
   * @type {string}
   * @memberof AuthLocalPostRequest
   */
  password?: string;
}
/**
 *
 * @export
 * @interface AuthLocalRegisterPostRequest
 */
export interface AuthLocalRegisterPostRequest {
  /**
   *
   * @type {string}
   * @memberof AuthLocalRegisterPostRequest
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof AuthLocalRegisterPostRequest
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof AuthLocalRegisterPostRequest
   */
  password?: string;
}
/**
 *
 * @export
 * @interface AuthResetPasswordPostRequest
 */
export interface AuthResetPasswordPostRequest {
  /**
   *
   * @type {string}
   * @memberof AuthResetPasswordPostRequest
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof AuthResetPasswordPostRequest
   */
  passwordConfirmation?: string;
  /**
   *
   * @type {string}
   * @memberof AuthResetPasswordPostRequest
   */
  code?: string;
}
/**
 *
 * @export
 * @interface AuthSendEmailConfirmationPost200Response
 */
export interface AuthSendEmailConfirmationPost200Response {
  /**
   *
   * @type {string}
   * @memberof AuthSendEmailConfirmationPost200Response
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof AuthSendEmailConfirmationPost200Response
   */
  sent?: AuthSendEmailConfirmationPost200ResponseSentEnum;
}

export const AuthSendEmailConfirmationPost200ResponseSentEnum = {
  True: "true",
} as const;

export type AuthSendEmailConfirmationPost200ResponseSentEnum =
  (typeof AuthSendEmailConfirmationPost200ResponseSentEnum)[keyof typeof AuthSendEmailConfirmationPost200ResponseSentEnum];

/**
 *
 * @export
 * @interface CafePage
 */
export interface CafePage {
  /**
   *
   * @type {CustomComponentsHeroComponent}
   * @memberof CafePage
   */
  Hero: CustomComponentsHeroComponent;
  /**
   *
   * @type {string}
   * @memberof CafePage
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof CafePage
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof CafePage
   */
  publishedAt?: string;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy}
   * @memberof CafePage
   */
  createdBy?: AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof CafePage
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface CafePageListResponse
 */
export interface CafePageListResponse {
  /**
   *
   * @type {Array<CafePageListResponseDataItem>}
   * @memberof CafePageListResponse
   */
  data?: Array<CafePageListResponseDataItem>;
  /**
   *
   * @type {AboutLocalizationListResponseMeta}
   * @memberof CafePageListResponse
   */
  meta?: AboutLocalizationListResponseMeta;
}
/**
 *
 * @export
 * @interface CafePageListResponseDataItem
 */
export interface CafePageListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof CafePageListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {CafePage}
   * @memberof CafePageListResponseDataItem
   */
  attributes?: CafePage;
}
/**
 *
 * @export
 * @interface CafePageRequest
 */
export interface CafePageRequest {
  /**
   *
   * @type {CafePageRequestData}
   * @memberof CafePageRequest
   */
  data: CafePageRequestData;
}
/**
 *
 * @export
 * @interface CafePageRequestData
 */
export interface CafePageRequestData {
  /**
   *
   * @type {CustomComponentsHeroComponent}
   * @memberof CafePageRequestData
   */
  Hero: CustomComponentsHeroComponent;
}
/**
 *
 * @export
 * @interface CafePageResponse
 */
export interface CafePageResponse {
  /**
   *
   * @type {CafePageResponseDataObject}
   * @memberof CafePageResponse
   */
  data?: CafePageResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof CafePageResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface CafePageResponseDataObject
 */
export interface CafePageResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof CafePageResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {CafePage}
   * @memberof CafePageResponseDataObject
   */
  attributes?: CafePage;
}
/**
 *
 * @export
 * @interface ContactPage
 */
export interface ContactPage {
  /**
   *
   * @type {CustomComponentsHeroComponent}
   * @memberof ContactPage
   */
  Hero: CustomComponentsHeroComponent;
  /**
   *
   * @type {string}
   * @memberof ContactPage
   */
  map: string;
  /**
   *
   * @type {string}
   * @memberof ContactPage
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof ContactPage
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof ContactPage
   */
  publishedAt?: string;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy}
   * @memberof ContactPage
   */
  createdBy?: AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof ContactPage
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface ContactPageListResponse
 */
export interface ContactPageListResponse {
  /**
   *
   * @type {Array<ContactPageListResponseDataItem>}
   * @memberof ContactPageListResponse
   */
  data?: Array<ContactPageListResponseDataItem>;
  /**
   *
   * @type {AboutLocalizationListResponseMeta}
   * @memberof ContactPageListResponse
   */
  meta?: AboutLocalizationListResponseMeta;
}
/**
 *
 * @export
 * @interface ContactPageListResponseDataItem
 */
export interface ContactPageListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof ContactPageListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {ContactPage}
   * @memberof ContactPageListResponseDataItem
   */
  attributes?: ContactPage;
}
/**
 *
 * @export
 * @interface ContactPageRequest
 */
export interface ContactPageRequest {
  /**
   *
   * @type {ContactPageRequestData}
   * @memberof ContactPageRequest
   */
  data: ContactPageRequestData;
}
/**
 *
 * @export
 * @interface ContactPageRequestData
 */
export interface ContactPageRequestData {
  /**
   *
   * @type {CustomComponentsHeroComponent}
   * @memberof ContactPageRequestData
   */
  Hero: CustomComponentsHeroComponent;
  /**
   *
   * @type {string}
   * @memberof ContactPageRequestData
   */
  map: string;
}
/**
 *
 * @export
 * @interface ContactPageResponse
 */
export interface ContactPageResponse {
  /**
   *
   * @type {ContactPageResponseDataObject}
   * @memberof ContactPageResponse
   */
  data?: ContactPageResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof ContactPageResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface ContactPageResponseDataObject
 */
export interface ContactPageResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof ContactPageResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {ContactPage}
   * @memberof ContactPageResponseDataObject
   */
  attributes?: ContactPage;
}
/**
 *
 * @export
 * @interface CustomComponentsHeroComponent
 */
export interface CustomComponentsHeroComponent {
  /**
   *
   * @type {number}
   * @memberof CustomComponentsHeroComponent
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof CustomComponentsHeroComponent
   */
  text_en?: string;
  /**
   *
   * @type {string}
   * @memberof CustomComponentsHeroComponent
   */
  desc_en?: string;
  /**
   *
   * @type {string}
   * @memberof CustomComponentsHeroComponent
   */
  text_cz?: string;
  /**
   *
   * @type {string}
   * @memberof CustomComponentsHeroComponent
   */
  desc_cz?: string;
}
/**
 *
 * @export
 * @interface CustomComponentsPricesComponent
 */
export interface CustomComponentsPricesComponent {
  /**
   *
   * @type {number}
   * @memberof CustomComponentsPricesComponent
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof CustomComponentsPricesComponent
   */
  price?: number;
  /**
   *
   * @type {string}
   * @memberof CustomComponentsPricesComponent
   */
  size?: string;
}
/**
 * @type ErrorData
 * @export
 */
export type ErrorData = Array<object> | object;

/**
 *
 * @export
 * @interface ErrorError
 */
export interface ErrorError {
  /**
   *
   * @type {number}
   * @memberof ErrorError
   */
  status?: number;
  /**
   *
   * @type {string}
   * @memberof ErrorError
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof ErrorError
   */
  message?: string;
  /**
   *
   * @type {object}
   * @memberof ErrorError
   */
  details?: object;
}
/**
 *
 * @export
 * @interface Flower
 */
export interface Flower {
  /**
   *
   * @type {string}
   * @memberof Flower
   */
  title_en: string;
  /**
   *
   * @type {FlowerCatalogue}
   * @memberof Flower
   */
  catalogue?: FlowerCatalogue;
  /**
   *
   * @type {string}
   * @memberof Flower
   */
  title_cz: string;
  /**
   *
   * @type {string}
   * @memberof Flower
   */
  desc_en: string;
  /**
   *
   * @type {string}
   * @memberof Flower
   */
  desc_cz: string;
  /**
   *
   * @type {AboutHeroBottomComponentImg2}
   * @memberof Flower
   */
  img: AboutHeroBottomComponentImg2;
  /**
   *
   * @type {AboutHeroBottomComponentImg2}
   * @memberof Flower
   */
  video: AboutHeroBottomComponentImg2;
  /**
   *
   * @type {Array<CustomComponentsPricesComponent>}
   * @memberof Flower
   */
  Prices: Array<CustomComponentsPricesComponent>;
  /**
   *
   * @type {string}
   * @memberof Flower
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof Flower
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof Flower
   */
  publishedAt?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof Flower
   */
  createdBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof Flower
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface FlowerCatalogue
 */
export interface FlowerCatalogue {
  /**
   *
   * @type {FlowerCatalogueData}
   * @memberof FlowerCatalogue
   */
  data?: FlowerCatalogueData;
}
/**
 *
 * @export
 * @interface FlowerCatalogueData
 */
export interface FlowerCatalogueData {
  /**
   *
   * @type {number}
   * @memberof FlowerCatalogueData
   */
  id?: number;
  /**
   *
   * @type {FlowerCatalogueDataAttributes}
   * @memberof FlowerCatalogueData
   */
  attributes?: FlowerCatalogueDataAttributes;
}
/**
 *
 * @export
 * @interface FlowerCatalogueDataAttributes
 */
export interface FlowerCatalogueDataAttributes {
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueDataAttributes
   */
  title_en?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueDataAttributes
   */
  title_cz?: string;
  /**
   *
   * @type {FlowerCatalogueDataAttributesFlowers}
   * @memberof FlowerCatalogueDataAttributes
   */
  flowers?: FlowerCatalogueDataAttributesFlowers;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueDataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueDataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueDataAttributes
   */
  publishedAt?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FlowerCatalogueDataAttributes
   */
  createdBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FlowerCatalogueDataAttributes
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface FlowerCatalogueDataAttributesFlowers
 */
export interface FlowerCatalogueDataAttributesFlowers {
  /**
   *
   * @type {Array<FlowerCatalogueDataAttributesFlowersDataInner>}
   * @memberof FlowerCatalogueDataAttributesFlowers
   */
  data?: Array<FlowerCatalogueDataAttributesFlowersDataInner>;
}
/**
 *
 * @export
 * @interface FlowerCatalogueDataAttributesFlowersDataInner
 */
export interface FlowerCatalogueDataAttributesFlowersDataInner {
  /**
   *
   * @type {number}
   * @memberof FlowerCatalogueDataAttributesFlowersDataInner
   */
  id?: number;
  /**
   *
   * @type {FlowerCatalogueDataAttributesFlowersDataInnerAttributes}
   * @memberof FlowerCatalogueDataAttributesFlowersDataInner
   */
  attributes?: FlowerCatalogueDataAttributesFlowersDataInnerAttributes;
}
/**
 *
 * @export
 * @interface FlowerCatalogueDataAttributesFlowersDataInnerAttributes
 */
export interface FlowerCatalogueDataAttributesFlowersDataInnerAttributes {
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueDataAttributesFlowersDataInnerAttributes
   */
  title_en?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FlowerCatalogueDataAttributesFlowersDataInnerAttributes
   */
  catalogue?: AboutCreatedBy;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueDataAttributesFlowersDataInnerAttributes
   */
  title_cz?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueDataAttributesFlowersDataInnerAttributes
   */
  desc_en?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueDataAttributesFlowersDataInnerAttributes
   */
  desc_cz?: string;
  /**
   *
   * @type {AboutHeroBottomComponentImg1}
   * @memberof FlowerCatalogueDataAttributesFlowersDataInnerAttributes
   */
  img?: AboutHeroBottomComponentImg1;
  /**
   *
   * @type {AboutHeroBottomComponentImg2}
   * @memberof FlowerCatalogueDataAttributesFlowersDataInnerAttributes
   */
  video?: AboutHeroBottomComponentImg2;
  /**
   *
   * @type {Array<FlowerCatalogueDataAttributesFlowersDataInnerAttributesPricesInner>}
   * @memberof FlowerCatalogueDataAttributesFlowersDataInnerAttributes
   */
  Prices?: Array<FlowerCatalogueDataAttributesFlowersDataInnerAttributesPricesInner>;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueDataAttributesFlowersDataInnerAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueDataAttributesFlowersDataInnerAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueDataAttributesFlowersDataInnerAttributes
   */
  publishedAt?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FlowerCatalogueDataAttributesFlowersDataInnerAttributes
   */
  createdBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FlowerCatalogueDataAttributesFlowersDataInnerAttributes
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface FlowerCatalogueDataAttributesFlowersDataInnerAttributesPricesInner
 */
export interface FlowerCatalogueDataAttributesFlowersDataInnerAttributesPricesInner {
  /**
   *
   * @type {number}
   * @memberof FlowerCatalogueDataAttributesFlowersDataInnerAttributesPricesInner
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof FlowerCatalogueDataAttributesFlowersDataInnerAttributesPricesInner
   */
  price?: number;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueDataAttributesFlowersDataInnerAttributesPricesInner
   */
  size?: string;
}
/**
 *
 * @export
 * @interface FlowerCatalogueFlowers
 */
export interface FlowerCatalogueFlowers {
  /**
   *
   * @type {Array<FlowerCatalogueFlowersDataInner>}
   * @memberof FlowerCatalogueFlowers
   */
  data?: Array<FlowerCatalogueFlowersDataInner>;
}
/**
 *
 * @export
 * @interface FlowerCatalogueFlowersDataInner
 */
export interface FlowerCatalogueFlowersDataInner {
  /**
   *
   * @type {number}
   * @memberof FlowerCatalogueFlowersDataInner
   */
  id?: number;
  /**
   *
   * @type {FlowerCatalogueFlowersDataInnerAttributes}
   * @memberof FlowerCatalogueFlowersDataInner
   */
  attributes?: FlowerCatalogueFlowersDataInnerAttributes;
}
/**
 *
 * @export
 * @interface FlowerCatalogueFlowersDataInnerAttributes
 */
export interface FlowerCatalogueFlowersDataInnerAttributes {
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributes
   */
  title_en?: string;
  /**
   *
   * @type {FlowerCatalogueFlowersDataInnerAttributesCatalogue}
   * @memberof FlowerCatalogueFlowersDataInnerAttributes
   */
  catalogue?: FlowerCatalogueFlowersDataInnerAttributesCatalogue;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributes
   */
  title_cz?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributes
   */
  desc_en?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributes
   */
  desc_cz?: string;
  /**
   *
   * @type {FlowerCatalogueFlowersDataInnerAttributesImg}
   * @memberof FlowerCatalogueFlowersDataInnerAttributes
   */
  img?: FlowerCatalogueFlowersDataInnerAttributesImg;
  /**
   *
   * @type {AboutHeroBottomComponentImg2}
   * @memberof FlowerCatalogueFlowersDataInnerAttributes
   */
  video?: AboutHeroBottomComponentImg2;
  /**
   *
   * @type {Array<FlowerCatalogueDataAttributesFlowersDataInnerAttributesPricesInner>}
   * @memberof FlowerCatalogueFlowersDataInnerAttributes
   */
  Prices?: Array<FlowerCatalogueDataAttributesFlowersDataInnerAttributesPricesInner>;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributes
   */
  publishedAt?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FlowerCatalogueFlowersDataInnerAttributes
   */
  createdBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FlowerCatalogueFlowersDataInnerAttributes
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface FlowerCatalogueFlowersDataInnerAttributesCatalogue
 */
export interface FlowerCatalogueFlowersDataInnerAttributesCatalogue {
  /**
   *
   * @type {FlowerCatalogueFlowersDataInnerAttributesCatalogueData}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesCatalogue
   */
  data?: FlowerCatalogueFlowersDataInnerAttributesCatalogueData;
}
/**
 *
 * @export
 * @interface FlowerCatalogueFlowersDataInnerAttributesCatalogueData
 */
export interface FlowerCatalogueFlowersDataInnerAttributesCatalogueData {
  /**
   *
   * @type {number}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesCatalogueData
   */
  id?: number;
  /**
   *
   * @type {FlowerCatalogueFlowersDataInnerAttributesCatalogueDataAttributes}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesCatalogueData
   */
  attributes?: FlowerCatalogueFlowersDataInnerAttributesCatalogueDataAttributes;
}
/**
 *
 * @export
 * @interface FlowerCatalogueFlowersDataInnerAttributesCatalogueDataAttributes
 */
export interface FlowerCatalogueFlowersDataInnerAttributesCatalogueDataAttributes {
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesCatalogueDataAttributes
   */
  title_en?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesCatalogueDataAttributes
   */
  title_cz?: string;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesRelated}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesCatalogueDataAttributes
   */
  flowers?: AboutHeroBottomComponentImg1DataAttributesRelated;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesCatalogueDataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesCatalogueDataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesCatalogueDataAttributes
   */
  publishedAt?: string;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesCatalogueDataAttributes
   */
  createdBy?: AboutHeroBottomComponentImg1DataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesCatalogueDataAttributes
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface FlowerCatalogueFlowersDataInnerAttributesImg
 */
export interface FlowerCatalogueFlowersDataInnerAttributesImg {
  /**
   *
   * @type {FlowerCatalogueFlowersDataInnerAttributesImgData}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImg
   */
  data?: FlowerCatalogueFlowersDataInnerAttributesImgData;
}
/**
 *
 * @export
 * @interface FlowerCatalogueFlowersDataInnerAttributesImgData
 */
export interface FlowerCatalogueFlowersDataInnerAttributesImgData {
  /**
   *
   * @type {number}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgData
   */
  id?: number;
  /**
   *
   * @type {FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgData
   */
  attributes?: FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes;
}
/**
 *
 * @export
 * @interface FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
 */
export interface FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes {
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
   */
  alternativeText?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
   */
  caption?: string;
  /**
   *
   * @type {number}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
   */
  width?: number;
  /**
   *
   * @type {number}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
   */
  height?: number;
  /**
   *
   * @type {any}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
   */
  formats?: any;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
   */
  hash?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
   */
  ext?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
   */
  mime?: string;
  /**
   *
   * @type {number}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
   */
  size?: number;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
   */
  url?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
   */
  previewUrl?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
   */
  provider?: string;
  /**
   *
   * @type {any}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
   */
  provider_metadata?: any;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesRelated}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
   */
  related?: AboutHeroBottomComponentImg1DataAttributesRelated;
  /**
   *
   * @type {FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolder}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
   */
  folder?: FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolder;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
   */
  folderPath?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
   */
  createdBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributes
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolder
 */
export interface FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolder {
  /**
   *
   * @type {FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolderData}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolder
   */
  data?: FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolderData;
}
/**
 *
 * @export
 * @interface FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolderData
 */
export interface FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolderData {
  /**
   *
   * @type {number}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolderData
   */
  id?: number;
  /**
   *
   * @type {FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolderDataAttributes}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolderData
   */
  attributes?: FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolderDataAttributes;
}
/**
 *
 * @export
 * @interface FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolderDataAttributes
 */
export interface FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolderDataAttributes {
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolderDataAttributes
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolderDataAttributes
   */
  pathId?: number;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolderDataAttributes
   */
  parent?: AboutCreatedBy;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesRelated}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolderDataAttributes
   */
  children?: AboutHeroBottomComponentImg1DataAttributesRelated;
  /**
   *
   * @type {AboutKitchenComponentImages}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolderDataAttributes
   */
  files?: AboutKitchenComponentImages;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolderDataAttributes
   */
  path?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolderDataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolderDataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolderDataAttributes
   */
  createdBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FlowerCatalogueFlowersDataInnerAttributesImgDataAttributesFolderDataAttributes
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface FlowerCatalogueListResponse
 */
export interface FlowerCatalogueListResponse {
  /**
   *
   * @type {Array<FlowerCatalogueListResponseDataItem>}
   * @memberof FlowerCatalogueListResponse
   */
  data?: Array<FlowerCatalogueListResponseDataItem>;
  /**
   *
   * @type {AboutLocalizationListResponseMeta}
   * @memberof FlowerCatalogueListResponse
   */
  meta?: AboutLocalizationListResponseMeta;
}
/**
 *
 * @export
 * @interface FlowerCatalogueListResponseDataItem
 */
export interface FlowerCatalogueListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof FlowerCatalogueListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {FlowerCatalogue}
   * @memberof FlowerCatalogueListResponseDataItem
   */
  attributes?: FlowerCatalogue;
}
/**
 *
 * @export
 * @interface FlowerCatalogueRequest
 */
export interface FlowerCatalogueRequest {
  /**
   *
   * @type {FlowerCatalogueRequestData}
   * @memberof FlowerCatalogueRequest
   */
  data: FlowerCatalogueRequestData;
}
/**
 *
 * @export
 * @interface FlowerCatalogueRequestData
 */
export interface FlowerCatalogueRequestData {
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueRequestData
   */
  title_en: string;
  /**
   *
   * @type {string}
   * @memberof FlowerCatalogueRequestData
   */
  title_cz: string;
  /**
   *
   * @type {Array<FlowerRequestDataCatalogue>}
   * @memberof FlowerCatalogueRequestData
   */
  flowers?: Array<FlowerRequestDataCatalogue>;
}
/**
 *
 * @export
 * @interface FlowerCatalogueResponse
 */
export interface FlowerCatalogueResponse {
  /**
   *
   * @type {FlowerCatalogueResponseDataObject}
   * @memberof FlowerCatalogueResponse
   */
  data?: FlowerCatalogueResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof FlowerCatalogueResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface FlowerCatalogueResponseDataObject
 */
export interface FlowerCatalogueResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof FlowerCatalogueResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {FlowerCatalogue}
   * @memberof FlowerCatalogueResponseDataObject
   */
  attributes?: FlowerCatalogue;
}
/**
 *
 * @export
 * @interface FlowerListResponse
 */
export interface FlowerListResponse {
  /**
   *
   * @type {Array<FlowerListResponseDataItem>}
   * @memberof FlowerListResponse
   */
  data?: Array<FlowerListResponseDataItem>;
  /**
   *
   * @type {AboutLocalizationListResponseMeta}
   * @memberof FlowerListResponse
   */
  meta?: AboutLocalizationListResponseMeta;
}
/**
 *
 * @export
 * @interface FlowerListResponseDataItem
 */
export interface FlowerListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof FlowerListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {Flower}
   * @memberof FlowerListResponseDataItem
   */
  attributes?: Flower;
}
/**
 *
 * @export
 * @interface FlowerPage
 */
export interface FlowerPage {
  /**
   *
   * @type {CustomComponentsHeroComponent}
   * @memberof FlowerPage
   */
  Hero: CustomComponentsHeroComponent;
  /**
   *
   * @type {AboutGetIdeasComponent}
   * @memberof FlowerPage
   */
  Bouquets: AboutGetIdeasComponent;
  /**
   *
   * @type {string}
   * @memberof FlowerPage
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerPage
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof FlowerPage
   */
  publishedAt?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FlowerPage
   */
  createdBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FlowerPage
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface FlowerPageListResponse
 */
export interface FlowerPageListResponse {
  /**
   *
   * @type {Array<FlowerPageListResponseDataItem>}
   * @memberof FlowerPageListResponse
   */
  data?: Array<FlowerPageListResponseDataItem>;
  /**
   *
   * @type {AboutLocalizationListResponseMeta}
   * @memberof FlowerPageListResponse
   */
  meta?: AboutLocalizationListResponseMeta;
}
/**
 *
 * @export
 * @interface FlowerPageListResponseDataItem
 */
export interface FlowerPageListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof FlowerPageListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {FlowerPage}
   * @memberof FlowerPageListResponseDataItem
   */
  attributes?: FlowerPage;
}
/**
 *
 * @export
 * @interface FlowerPageRequest
 */
export interface FlowerPageRequest {
  /**
   *
   * @type {FlowerPageRequestData}
   * @memberof FlowerPageRequest
   */
  data: FlowerPageRequestData;
}
/**
 *
 * @export
 * @interface FlowerPageRequestData
 */
export interface FlowerPageRequestData {
  /**
   *
   * @type {CustomComponentsHeroComponent}
   * @memberof FlowerPageRequestData
   */
  Hero: CustomComponentsHeroComponent;
  /**
   *
   * @type {AboutGetIdeasComponent}
   * @memberof FlowerPageRequestData
   */
  Bouquets: AboutGetIdeasComponent;
}
/**
 *
 * @export
 * @interface FlowerPageResponse
 */
export interface FlowerPageResponse {
  /**
   *
   * @type {FlowerPageResponseDataObject}
   * @memberof FlowerPageResponse
   */
  data?: FlowerPageResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof FlowerPageResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface FlowerPageResponseDataObject
 */
export interface FlowerPageResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof FlowerPageResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {FlowerPage}
   * @memberof FlowerPageResponseDataObject
   */
  attributes?: FlowerPage;
}
/**
 *
 * @export
 * @interface FlowerRequest
 */
export interface FlowerRequest {
  /**
   *
   * @type {FlowerRequestData}
   * @memberof FlowerRequest
   */
  data: FlowerRequestData;
}
/**
 *
 * @export
 * @interface FlowerRequestData
 */
export interface FlowerRequestData {
  /**
   *
   * @type {string}
   * @memberof FlowerRequestData
   */
  title_en: string;
  /**
   *
   * @type {FlowerRequestDataCatalogue}
   * @memberof FlowerRequestData
   */
  catalogue?: FlowerRequestDataCatalogue;
  /**
   *
   * @type {string}
   * @memberof FlowerRequestData
   */
  title_cz: string;
  /**
   *
   * @type {string}
   * @memberof FlowerRequestData
   */
  desc_en: string;
  /**
   *
   * @type {string}
   * @memberof FlowerRequestData
   */
  desc_cz: string;
  /**
   *
   * @type {FlowerRequestDataCatalogue}
   * @memberof FlowerRequestData
   */
  img: FlowerRequestDataCatalogue;
  /**
   *
   * @type {FlowerRequestDataCatalogue}
   * @memberof FlowerRequestData
   */
  video: FlowerRequestDataCatalogue;
  /**
   *
   * @type {Array<CustomComponentsPricesComponent>}
   * @memberof FlowerRequestData
   */
  Prices: Array<CustomComponentsPricesComponent>;
}
/**
 * @type FlowerRequestDataCatalogue
 * @export
 */
export type FlowerRequestDataCatalogue = number | string;

/**
 *
 * @export
 * @interface FlowerResponse
 */
export interface FlowerResponse {
  /**
   *
   * @type {FlowerResponseDataObject}
   * @memberof FlowerResponse
   */
  data?: FlowerResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof FlowerResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface FlowerResponseDataObject
 */
export interface FlowerResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof FlowerResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {Flower}
   * @memberof FlowerResponseDataObject
   */
  attributes?: Flower;
}
/**
 *
 * @export
 * @interface Food
 */
export interface Food {
  /**
   *
   * @type {string}
   * @memberof Food
   */
  title_en: string;
  /**
   *
   * @type {string}
   * @memberof Food
   */
  title_cz: string;
  /**
   *
   * @type {AboutHeroBottomComponentImg1}
   * @memberof Food
   */
  img: AboutHeroBottomComponentImg1;
  /**
   *
   * @type {number}
   * @memberof Food
   */
  price: number;
  /**
   *
   * @type {string}
   * @memberof Food
   */
  desc_en: string;
  /**
   *
   * @type {string}
   * @memberof Food
   */
  desc_cz: string;
  /**
   *
   * @type {FoodFoodCategory}
   * @memberof Food
   */
  food_category?: FoodFoodCategory;
  /**
   *
   * @type {string}
   * @memberof Food
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof Food
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof Food
   */
  publishedAt?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof Food
   */
  createdBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof Food
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface FoodCategory
 */
export interface FoodCategory {
  /**
   *
   * @type {string}
   * @memberof FoodCategory
   */
  title_en: string;
  /**
   *
   * @type {string}
   * @memberof FoodCategory
   */
  title_cz: string;
  /**
   *
   * @type {FoodCategoryFoods}
   * @memberof FoodCategory
   */
  foods?: FoodCategoryFoods;
  /**
   *
   * @type {string}
   * @memberof FoodCategory
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof FoodCategory
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof FoodCategory
   */
  publishedAt?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FoodCategory
   */
  createdBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FoodCategory
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface FoodCategoryFoods
 */
export interface FoodCategoryFoods {
  /**
   *
   * @type {Array<FoodCategoryFoodsDataInner>}
   * @memberof FoodCategoryFoods
   */
  data?: Array<FoodCategoryFoodsDataInner>;
}
/**
 *
 * @export
 * @interface FoodCategoryFoodsDataInner
 */
export interface FoodCategoryFoodsDataInner {
  /**
   *
   * @type {number}
   * @memberof FoodCategoryFoodsDataInner
   */
  id?: number;
  /**
   *
   * @type {FoodCategoryFoodsDataInnerAttributes}
   * @memberof FoodCategoryFoodsDataInner
   */
  attributes?: FoodCategoryFoodsDataInnerAttributes;
}
/**
 *
 * @export
 * @interface FoodCategoryFoodsDataInnerAttributes
 */
export interface FoodCategoryFoodsDataInnerAttributes {
  /**
   *
   * @type {string}
   * @memberof FoodCategoryFoodsDataInnerAttributes
   */
  title_en?: string;
  /**
   *
   * @type {string}
   * @memberof FoodCategoryFoodsDataInnerAttributes
   */
  title_cz?: string;
  /**
   *
   * @type {AboutHeroBottomComponentImg1}
   * @memberof FoodCategoryFoodsDataInnerAttributes
   */
  img?: AboutHeroBottomComponentImg1;
  /**
   *
   * @type {number}
   * @memberof FoodCategoryFoodsDataInnerAttributes
   */
  price?: number;
  /**
   *
   * @type {string}
   * @memberof FoodCategoryFoodsDataInnerAttributes
   */
  desc_en?: string;
  /**
   *
   * @type {string}
   * @memberof FoodCategoryFoodsDataInnerAttributes
   */
  desc_cz?: string;
  /**
   *
   * @type {FoodCategoryFoodsDataInnerAttributesFoodCategory}
   * @memberof FoodCategoryFoodsDataInnerAttributes
   */
  food_category?: FoodCategoryFoodsDataInnerAttributesFoodCategory;
  /**
   *
   * @type {string}
   * @memberof FoodCategoryFoodsDataInnerAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof FoodCategoryFoodsDataInnerAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof FoodCategoryFoodsDataInnerAttributes
   */
  publishedAt?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FoodCategoryFoodsDataInnerAttributes
   */
  createdBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FoodCategoryFoodsDataInnerAttributes
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface FoodCategoryFoodsDataInnerAttributesFoodCategory
 */
export interface FoodCategoryFoodsDataInnerAttributesFoodCategory {
  /**
   *
   * @type {FoodCategoryFoodsDataInnerAttributesFoodCategoryData}
   * @memberof FoodCategoryFoodsDataInnerAttributesFoodCategory
   */
  data?: FoodCategoryFoodsDataInnerAttributesFoodCategoryData;
}
/**
 *
 * @export
 * @interface FoodCategoryFoodsDataInnerAttributesFoodCategoryData
 */
export interface FoodCategoryFoodsDataInnerAttributesFoodCategoryData {
  /**
   *
   * @type {number}
   * @memberof FoodCategoryFoodsDataInnerAttributesFoodCategoryData
   */
  id?: number;
  /**
   *
   * @type {FoodCategoryFoodsDataInnerAttributesFoodCategoryDataAttributes}
   * @memberof FoodCategoryFoodsDataInnerAttributesFoodCategoryData
   */
  attributes?: FoodCategoryFoodsDataInnerAttributesFoodCategoryDataAttributes;
}
/**
 *
 * @export
 * @interface FoodCategoryFoodsDataInnerAttributesFoodCategoryDataAttributes
 */
export interface FoodCategoryFoodsDataInnerAttributesFoodCategoryDataAttributes {
  /**
   *
   * @type {string}
   * @memberof FoodCategoryFoodsDataInnerAttributesFoodCategoryDataAttributes
   */
  title_en?: string;
  /**
   *
   * @type {string}
   * @memberof FoodCategoryFoodsDataInnerAttributesFoodCategoryDataAttributes
   */
  title_cz?: string;
  /**
   *
   * @type {AboutHeroBottomComponentImg1DataAttributesRelated}
   * @memberof FoodCategoryFoodsDataInnerAttributesFoodCategoryDataAttributes
   */
  foods?: AboutHeroBottomComponentImg1DataAttributesRelated;
  /**
   *
   * @type {string}
   * @memberof FoodCategoryFoodsDataInnerAttributesFoodCategoryDataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof FoodCategoryFoodsDataInnerAttributesFoodCategoryDataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof FoodCategoryFoodsDataInnerAttributesFoodCategoryDataAttributes
   */
  publishedAt?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FoodCategoryFoodsDataInnerAttributesFoodCategoryDataAttributes
   */
  createdBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FoodCategoryFoodsDataInnerAttributesFoodCategoryDataAttributes
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface FoodCategoryListResponse
 */
export interface FoodCategoryListResponse {
  /**
   *
   * @type {Array<FoodCategoryListResponseDataItem>}
   * @memberof FoodCategoryListResponse
   */
  data?: Array<FoodCategoryListResponseDataItem>;
  /**
   *
   * @type {AboutLocalizationListResponseMeta}
   * @memberof FoodCategoryListResponse
   */
  meta?: AboutLocalizationListResponseMeta;
}
/**
 *
 * @export
 * @interface FoodCategoryListResponseDataItem
 */
export interface FoodCategoryListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof FoodCategoryListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {FoodCategory}
   * @memberof FoodCategoryListResponseDataItem
   */
  attributes?: FoodCategory;
}
/**
 *
 * @export
 * @interface FoodCategoryRequest
 */
export interface FoodCategoryRequest {
  /**
   *
   * @type {FoodCategoryRequestData}
   * @memberof FoodCategoryRequest
   */
  data: FoodCategoryRequestData;
}
/**
 *
 * @export
 * @interface FoodCategoryRequestData
 */
export interface FoodCategoryRequestData {
  /**
   *
   * @type {string}
   * @memberof FoodCategoryRequestData
   */
  title_en: string;
  /**
   *
   * @type {string}
   * @memberof FoodCategoryRequestData
   */
  title_cz: string;
  /**
   *
   * @type {Array<FlowerRequestDataCatalogue>}
   * @memberof FoodCategoryRequestData
   */
  foods?: Array<FlowerRequestDataCatalogue>;
}
/**
 *
 * @export
 * @interface FoodCategoryResponse
 */
export interface FoodCategoryResponse {
  /**
   *
   * @type {FoodCategoryResponseDataObject}
   * @memberof FoodCategoryResponse
   */
  data?: FoodCategoryResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof FoodCategoryResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface FoodCategoryResponseDataObject
 */
export interface FoodCategoryResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof FoodCategoryResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {FoodCategory}
   * @memberof FoodCategoryResponseDataObject
   */
  attributes?: FoodCategory;
}
/**
 *
 * @export
 * @interface FoodFoodCategory
 */
export interface FoodFoodCategory {
  /**
   *
   * @type {FoodFoodCategoryData}
   * @memberof FoodFoodCategory
   */
  data?: FoodFoodCategoryData;
}
/**
 *
 * @export
 * @interface FoodFoodCategoryData
 */
export interface FoodFoodCategoryData {
  /**
   *
   * @type {number}
   * @memberof FoodFoodCategoryData
   */
  id?: number;
  /**
   *
   * @type {FoodFoodCategoryDataAttributes}
   * @memberof FoodFoodCategoryData
   */
  attributes?: FoodFoodCategoryDataAttributes;
}
/**
 *
 * @export
 * @interface FoodFoodCategoryDataAttributes
 */
export interface FoodFoodCategoryDataAttributes {
  /**
   *
   * @type {string}
   * @memberof FoodFoodCategoryDataAttributes
   */
  title_en?: string;
  /**
   *
   * @type {string}
   * @memberof FoodFoodCategoryDataAttributes
   */
  title_cz?: string;
  /**
   *
   * @type {FoodFoodCategoryDataAttributesFoods}
   * @memberof FoodFoodCategoryDataAttributes
   */
  foods?: FoodFoodCategoryDataAttributesFoods;
  /**
   *
   * @type {string}
   * @memberof FoodFoodCategoryDataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof FoodFoodCategoryDataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof FoodFoodCategoryDataAttributes
   */
  publishedAt?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FoodFoodCategoryDataAttributes
   */
  createdBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FoodFoodCategoryDataAttributes
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface FoodFoodCategoryDataAttributesFoods
 */
export interface FoodFoodCategoryDataAttributesFoods {
  /**
   *
   * @type {Array<FoodFoodCategoryDataAttributesFoodsDataInner>}
   * @memberof FoodFoodCategoryDataAttributesFoods
   */
  data?: Array<FoodFoodCategoryDataAttributesFoodsDataInner>;
}
/**
 *
 * @export
 * @interface FoodFoodCategoryDataAttributesFoodsDataInner
 */
export interface FoodFoodCategoryDataAttributesFoodsDataInner {
  /**
   *
   * @type {number}
   * @memberof FoodFoodCategoryDataAttributesFoodsDataInner
   */
  id?: number;
  /**
   *
   * @type {FoodFoodCategoryDataAttributesFoodsDataInnerAttributes}
   * @memberof FoodFoodCategoryDataAttributesFoodsDataInner
   */
  attributes?: FoodFoodCategoryDataAttributesFoodsDataInnerAttributes;
}
/**
 *
 * @export
 * @interface FoodFoodCategoryDataAttributesFoodsDataInnerAttributes
 */
export interface FoodFoodCategoryDataAttributesFoodsDataInnerAttributes {
  /**
   *
   * @type {string}
   * @memberof FoodFoodCategoryDataAttributesFoodsDataInnerAttributes
   */
  title_en?: string;
  /**
   *
   * @type {string}
   * @memberof FoodFoodCategoryDataAttributesFoodsDataInnerAttributes
   */
  title_cz?: string;
  /**
   *
   * @type {AboutHeroBottomComponentImg2}
   * @memberof FoodFoodCategoryDataAttributesFoodsDataInnerAttributes
   */
  img?: AboutHeroBottomComponentImg2;
  /**
   *
   * @type {number}
   * @memberof FoodFoodCategoryDataAttributesFoodsDataInnerAttributes
   */
  price?: number;
  /**
   *
   * @type {string}
   * @memberof FoodFoodCategoryDataAttributesFoodsDataInnerAttributes
   */
  desc_en?: string;
  /**
   *
   * @type {string}
   * @memberof FoodFoodCategoryDataAttributesFoodsDataInnerAttributes
   */
  desc_cz?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FoodFoodCategoryDataAttributesFoodsDataInnerAttributes
   */
  food_category?: AboutCreatedBy;
  /**
   *
   * @type {string}
   * @memberof FoodFoodCategoryDataAttributesFoodsDataInnerAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof FoodFoodCategoryDataAttributesFoodsDataInnerAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof FoodFoodCategoryDataAttributesFoodsDataInnerAttributes
   */
  publishedAt?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FoodFoodCategoryDataAttributesFoodsDataInnerAttributes
   */
  createdBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof FoodFoodCategoryDataAttributesFoodsDataInnerAttributes
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface FoodListResponse
 */
export interface FoodListResponse {
  /**
   *
   * @type {Array<FoodListResponseDataItem>}
   * @memberof FoodListResponse
   */
  data?: Array<FoodListResponseDataItem>;
  /**
   *
   * @type {AboutLocalizationListResponseMeta}
   * @memberof FoodListResponse
   */
  meta?: AboutLocalizationListResponseMeta;
}
/**
 *
 * @export
 * @interface FoodListResponseDataItem
 */
export interface FoodListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof FoodListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {Food}
   * @memberof FoodListResponseDataItem
   */
  attributes?: Food;
}
/**
 *
 * @export
 * @interface FoodRequest
 */
export interface FoodRequest {
  /**
   *
   * @type {FoodRequestData}
   * @memberof FoodRequest
   */
  data: FoodRequestData;
}
/**
 *
 * @export
 * @interface FoodRequestData
 */
export interface FoodRequestData {
  /**
   *
   * @type {string}
   * @memberof FoodRequestData
   */
  title_en: string;
  /**
   *
   * @type {string}
   * @memberof FoodRequestData
   */
  title_cz: string;
  /**
   *
   * @type {FlowerRequestDataCatalogue}
   * @memberof FoodRequestData
   */
  img: FlowerRequestDataCatalogue;
  /**
   *
   * @type {number}
   * @memberof FoodRequestData
   */
  price: number;
  /**
   *
   * @type {string}
   * @memberof FoodRequestData
   */
  desc_en: string;
  /**
   *
   * @type {string}
   * @memberof FoodRequestData
   */
  desc_cz: string;
  /**
   *
   * @type {FlowerRequestDataCatalogue}
   * @memberof FoodRequestData
   */
  food_category?: FlowerRequestDataCatalogue;
}
/**
 *
 * @export
 * @interface FoodResponse
 */
export interface FoodResponse {
  /**
   *
   * @type {FoodResponseDataObject}
   * @memberof FoodResponse
   */
  data?: FoodResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof FoodResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface FoodResponseDataObject
 */
export interface FoodResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof FoodResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {Food}
   * @memberof FoodResponseDataObject
   */
  attributes?: Food;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
  /**
   *
   * @type {ErrorData}
   * @memberof ModelError
   */
  data?: ErrorData | null;
  /**
   *
   * @type {ErrorError}
   * @memberof ModelError
   */
  error: ErrorError;
}
/**
 *
 * @export
 * @interface Reviewer
 */
export interface Reviewer {
  /**
   *
   * @type {string}
   * @memberof Reviewer
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof Reviewer
   */
  stars: number;
  /**
   *
   * @type {AboutHeroBottomComponentImg1}
   * @memberof Reviewer
   */
  img: AboutHeroBottomComponentImg1;
  /**
   *
   * @type {string}
   * @memberof Reviewer
   */
  comment_en: string;
  /**
   *
   * @type {string}
   * @memberof Reviewer
   */
  comment_cz: string;
  /**
   *
   * @type {string}
   * @memberof Reviewer
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof Reviewer
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof Reviewer
   */
  publishedAt?: string;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof Reviewer
   */
  createdBy?: AboutCreatedBy;
  /**
   *
   * @type {AboutCreatedBy}
   * @memberof Reviewer
   */
  updatedBy?: AboutCreatedBy;
}
/**
 *
 * @export
 * @interface ReviewerListResponse
 */
export interface ReviewerListResponse {
  /**
   *
   * @type {Array<ReviewerListResponseDataItem>}
   * @memberof ReviewerListResponse
   */
  data?: Array<ReviewerListResponseDataItem>;
  /**
   *
   * @type {AboutLocalizationListResponseMeta}
   * @memberof ReviewerListResponse
   */
  meta?: AboutLocalizationListResponseMeta;
}
/**
 *
 * @export
 * @interface ReviewerListResponseDataItem
 */
export interface ReviewerListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof ReviewerListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {Reviewer}
   * @memberof ReviewerListResponseDataItem
   */
  attributes?: Reviewer;
}
/**
 *
 * @export
 * @interface ReviewerRequest
 */
export interface ReviewerRequest {
  /**
   *
   * @type {ReviewerRequestData}
   * @memberof ReviewerRequest
   */
  data: ReviewerRequestData;
}
/**
 *
 * @export
 * @interface ReviewerRequestData
 */
export interface ReviewerRequestData {
  /**
   *
   * @type {string}
   * @memberof ReviewerRequestData
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof ReviewerRequestData
   */
  stars: number;
  /**
   *
   * @type {FlowerRequestDataCatalogue}
   * @memberof ReviewerRequestData
   */
  img: FlowerRequestDataCatalogue;
  /**
   *
   * @type {string}
   * @memberof ReviewerRequestData
   */
  comment_en: string;
  /**
   *
   * @type {string}
   * @memberof ReviewerRequestData
   */
  comment_cz: string;
}
/**
 *
 * @export
 * @interface ReviewerResponse
 */
export interface ReviewerResponse {
  /**
   *
   * @type {ReviewerResponseDataObject}
   * @memberof ReviewerResponse
   */
  data?: ReviewerResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof ReviewerResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface ReviewerResponseDataObject
 */
export interface ReviewerResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof ReviewerResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {Reviewer}
   * @memberof ReviewerResponseDataObject
   */
  attributes?: Reviewer;
}
/**
 *
 * @export
 * @interface UploadFile
 */
export interface UploadFile {
  /**
   *
   * @type {number}
   * @memberof UploadFile
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  alternativeText?: string;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  caption?: string;
  /**
   *
   * @type {number}
   * @memberof UploadFile
   */
  width?: number;
  /**
   *
   * @type {number}
   * @memberof UploadFile
   */
  height?: number;
  /**
   *
   * @type {number}
   * @memberof UploadFile
   */
  formats?: number;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  hash?: string;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  ext?: string;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  mime?: string;
  /**
   *
   * @type {number}
   * @memberof UploadFile
   */
  size?: number;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  url?: string;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  previewUrl?: string;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  provider?: string;
  /**
   *
   * @type {object}
   * @memberof UploadFile
   */
  provider_metadata?: object;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  updatedAt?: string;
}
/**
 *
 * @export
 * @interface UsersIdDelete200Response
 */
export interface UsersIdDelete200Response {
  /**
   *
   * @type {number}
   * @memberof UsersIdDelete200Response
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UsersIdDelete200Response
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof UsersIdDelete200Response
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof UsersIdDelete200Response
   */
  provider?: string;
  /**
   *
   * @type {boolean}
   * @memberof UsersIdDelete200Response
   */
  confirmed?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UsersIdDelete200Response
   */
  blocked?: boolean;
  /**
   *
   * @type {string}
   * @memberof UsersIdDelete200Response
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersIdDelete200Response
   */
  updatedAt?: string;
}
/**
 *
 * @export
 * @interface UsersPermissionsPermissionsGet200Response
 */
export interface UsersPermissionsPermissionsGet200Response {
  /**
   *
   * @type {{ [key: string]: UsersPermissionsPermissionsTreeValue; }}
   * @memberof UsersPermissionsPermissionsGet200Response
   */
  permissions?: { [key: string]: UsersPermissionsPermissionsTreeValue };
}
/**
 * every api
 * @export
 * @interface UsersPermissionsPermissionsTreeValue
 */
export interface UsersPermissionsPermissionsTreeValue {
  /**
   * every controller of the api
   * @type {{ [key: string]: { [key: string]: UsersPermissionsPermissionsTreeValueControllersValueValue; }; }}
   * @memberof UsersPermissionsPermissionsTreeValue
   */
  controllers?: {
    [key: string]: {
      [key: string]: UsersPermissionsPermissionsTreeValueControllersValueValue;
    };
  };
}
/**
 * every action of every controller
 * @export
 * @interface UsersPermissionsPermissionsTreeValueControllersValueValue
 */
export interface UsersPermissionsPermissionsTreeValueControllersValueValue {
  /**
   *
   * @type {boolean}
   * @memberof UsersPermissionsPermissionsTreeValueControllersValueValue
   */
  enabled?: boolean;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionsTreeValueControllersValueValue
   */
  policy?: string;
}
/**
 *
 * @export
 * @interface UsersPermissionsRole
 */
export interface UsersPermissionsRole {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsRole
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRole
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRole
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRole
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRole
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRole
   */
  updatedAt?: string;
}
/**
 *
 * @export
 * @interface UsersPermissionsRolesGet200Response
 */
export interface UsersPermissionsRolesGet200Response {
  /**
   *
   * @type {Array<UsersPermissionsRolesGet200ResponseRolesInner>}
   * @memberof UsersPermissionsRolesGet200Response
   */
  roles?: Array<UsersPermissionsRolesGet200ResponseRolesInner>;
}
/**
 *
 * @export
 * @interface UsersPermissionsRolesGet200ResponseRolesInner
 */
export interface UsersPermissionsRolesGet200ResponseRolesInner {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInner
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInner
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInner
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInner
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInner
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInner
   */
  updatedAt?: string;
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInner
   */
  nb_users?: number;
}
/**
 *
 * @export
 * @interface UsersPermissionsRolesGet200ResponseRolesInnerAllOf
 */
export interface UsersPermissionsRolesGet200ResponseRolesInnerAllOf {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInnerAllOf
   */
  nb_users?: number;
}
/**
 *
 * @export
 * @interface UsersPermissionsRolesIdGet200Response
 */
export interface UsersPermissionsRolesIdGet200Response {
  /**
   *
   * @type {UsersPermissionsRole}
   * @memberof UsersPermissionsRolesIdGet200Response
   */
  role?: UsersPermissionsRole;
}
/**
 *
 * @export
 * @interface UsersPermissionsRolesPostRequest
 */
export interface UsersPermissionsRolesPostRequest {
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesPostRequest
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesPostRequest
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesPostRequest
   */
  type?: string;
  /**
   *
   * @type {{ [key: string]: UsersPermissionsPermissionsTreeValue; }}
   * @memberof UsersPermissionsRolesPostRequest
   */
  permissions?: { [key: string]: UsersPermissionsPermissionsTreeValue };
}
/**
 *
 * @export
 * @interface UsersPermissionsUser
 */
export interface UsersPermissionsUser {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsUser
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUser
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUser
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUser
   */
  provider?: string;
  /**
   *
   * @type {boolean}
   * @memberof UsersPermissionsUser
   */
  confirmed?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UsersPermissionsUser
   */
  blocked?: boolean;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUser
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUser
   */
  updatedAt?: string;
}
/**
 *
 * @export
 * @interface UsersPermissionsUserRegistration
 */
export interface UsersPermissionsUserRegistration {
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUserRegistration
   */
  jwt?: string;
  /**
   *
   * @type {UsersPermissionsUser}
   * @memberof UsersPermissionsUserRegistration
   */
  user?: UsersPermissionsUser;
}
/**
 *
 * @export
 * @interface UsersPost201Response
 */
export interface UsersPost201Response {
  /**
   *
   * @type {number}
   * @memberof UsersPost201Response
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UsersPost201Response
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPost201Response
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPost201Response
   */
  provider?: string;
  /**
   *
   * @type {boolean}
   * @memberof UsersPost201Response
   */
  confirmed?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UsersPost201Response
   */
  blocked?: boolean;
  /**
   *
   * @type {string}
   * @memberof UsersPost201Response
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPost201Response
   */
  updatedAt?: string;
  /**
   *
   * @type {UsersPermissionsRole}
   * @memberof UsersPost201Response
   */
  role?: UsersPermissionsRole;
}
/**
 *
 * @export
 * @interface UsersPostRequest
 */
export interface UsersPostRequest {
  /**
   *
   * @type {string}
   * @memberof UsersPostRequest
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UsersPostRequest
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof UsersPostRequest
   */
  password: string;
}

/**
 * AboutApi - axios parameter creator
 * @export
 */
export const AboutApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAbout: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/about`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAbout: async (
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/about`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (paginationWithCount !== undefined) {
        localVarQueryParameter["pagination[withCount]"] = paginationWithCount;
      }

      if (paginationPage !== undefined) {
        localVarQueryParameter["pagination[page]"] = paginationPage;
      }

      if (paginationPageSize !== undefined) {
        localVarQueryParameter["pagination[pageSize]"] = paginationPageSize;
      }

      if (paginationStart !== undefined) {
        localVarQueryParameter["pagination[start]"] = paginationStart;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination[limit]"] = paginationLimit;
      }

      if (fields !== undefined) {
        localVarQueryParameter["fields"] = fields;
      }

      if (populate !== undefined) {
        localVarQueryParameter["populate"] = populate;
      }

      if (filters !== undefined) {
        localVarQueryParameter["filters"] = filters;
      }

      if (locale !== undefined) {
        localVarQueryParameter["locale"] = locale;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {AboutLocalizationRequest} aboutLocalizationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAboutLocalizations: async (
      aboutLocalizationRequest: AboutLocalizationRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'aboutLocalizationRequest' is not null or undefined
      assertParamExists(
        "postAboutLocalizations",
        "aboutLocalizationRequest",
        aboutLocalizationRequest
      );
      const localVarPath = `/about/localizations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        aboutLocalizationRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {AboutRequest} aboutRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAbout: async (
      aboutRequest: AboutRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'aboutRequest' is not null or undefined
      assertParamExists("putAbout", "aboutRequest", aboutRequest);
      const localVarPath = `/about`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        aboutRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AboutApi - functional programming interface
 * @export
 */
export const AboutApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AboutApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteAbout(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAbout(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAbout(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AboutResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAbout(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {AboutLocalizationRequest} aboutLocalizationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postAboutLocalizations(
      aboutLocalizationRequest: AboutLocalizationRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AboutLocalizationResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postAboutLocalizations(
          aboutLocalizationRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {AboutRequest} aboutRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putAbout(
      aboutRequest: AboutRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AboutResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putAbout(
        aboutRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * AboutApi - factory interface
 * @export
 */
export const AboutApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AboutApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAbout(options?: any): AxiosPromise<number> {
      return localVarFp
        .deleteAbout(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAbout(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: any
    ): AxiosPromise<AboutResponse> {
      return localVarFp
        .getAbout(
          sort,
          paginationWithCount,
          paginationPage,
          paginationPageSize,
          paginationStart,
          paginationLimit,
          fields,
          populate,
          filters,
          locale,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {AboutLocalizationRequest} aboutLocalizationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAboutLocalizations(
      aboutLocalizationRequest: AboutLocalizationRequest,
      options?: any
    ): AxiosPromise<AboutLocalizationResponse> {
      return localVarFp
        .postAboutLocalizations(aboutLocalizationRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {AboutRequest} aboutRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putAbout(
      aboutRequest: AboutRequest,
      options?: any
    ): AxiosPromise<AboutResponse> {
      return localVarFp
        .putAbout(aboutRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AboutApi - object-oriented interface
 * @export
 * @class AboutApi
 * @extends {BaseAPI}
 */
export class AboutApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AboutApi
   */
  public deleteAbout(options?: AxiosRequestConfig) {
    return AboutApiFp(this.configuration)
      .deleteAbout(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
   * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
   * @param {number} [paginationPage] Page number (default: 0)
   * @param {number} [paginationPageSize] Page size (default: 25)
   * @param {number} [paginationStart] Offset value (default: 0)
   * @param {number} [paginationLimit] Number of entities to return (default: 25)
   * @param {string} [fields] Fields to return (ex: title,author)
   * @param {string} [populate] Relations to return
   * @param {object} [filters] Filters to apply
   * @param {string} [locale] Locale to apply
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AboutApi
   */
  public getAbout(
    sort?: string,
    paginationWithCount?: boolean,
    paginationPage?: number,
    paginationPageSize?: number,
    paginationStart?: number,
    paginationLimit?: number,
    fields?: string,
    populate?: string,
    filters?: object,
    locale?: string,
    options?: AxiosRequestConfig
  ) {
    return AboutApiFp(this.configuration)
      .getAbout(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AboutLocalizationRequest} aboutLocalizationRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AboutApi
   */
  public postAboutLocalizations(
    aboutLocalizationRequest: AboutLocalizationRequest,
    options?: AxiosRequestConfig
  ) {
    return AboutApiFp(this.configuration)
      .postAboutLocalizations(aboutLocalizationRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AboutRequest} aboutRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AboutApi
   */
  public putAbout(aboutRequest: AboutRequest, options?: AxiosRequestConfig) {
    return AboutApiFp(this.configuration)
      .putAbout(aboutRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CafePageApi - axios parameter creator
 * @export
 */
export const CafePageApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCafePage: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/cafe-page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCafePage: async (
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/cafe-page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (paginationWithCount !== undefined) {
        localVarQueryParameter["pagination[withCount]"] = paginationWithCount;
      }

      if (paginationPage !== undefined) {
        localVarQueryParameter["pagination[page]"] = paginationPage;
      }

      if (paginationPageSize !== undefined) {
        localVarQueryParameter["pagination[pageSize]"] = paginationPageSize;
      }

      if (paginationStart !== undefined) {
        localVarQueryParameter["pagination[start]"] = paginationStart;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination[limit]"] = paginationLimit;
      }

      if (fields !== undefined) {
        localVarQueryParameter["fields"] = fields;
      }

      if (populate !== undefined) {
        localVarQueryParameter["populate"] = populate;
      }

      if (filters !== undefined) {
        localVarQueryParameter["filters"] = filters;
      }

      if (locale !== undefined) {
        localVarQueryParameter["locale"] = locale;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CafePageRequest} cafePageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCafePage: async (
      cafePageRequest: CafePageRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'cafePageRequest' is not null or undefined
      assertParamExists("putCafePage", "cafePageRequest", cafePageRequest);
      const localVarPath = `/cafe-page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        cafePageRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CafePageApi - functional programming interface
 * @export
 */
export const CafePageApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CafePageApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCafePage(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCafePage(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCafePage(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CafePageResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCafePage(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {CafePageRequest} cafePageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putCafePage(
      cafePageRequest: CafePageRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<CafePageResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putCafePage(
        cafePageRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * CafePageApi - factory interface
 * @export
 */
export const CafePageApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CafePageApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCafePage(options?: any): AxiosPromise<number> {
      return localVarFp
        .deleteCafePage(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCafePage(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: any
    ): AxiosPromise<CafePageResponse> {
      return localVarFp
        .getCafePage(
          sort,
          paginationWithCount,
          paginationPage,
          paginationPageSize,
          paginationStart,
          paginationLimit,
          fields,
          populate,
          filters,
          locale,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CafePageRequest} cafePageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCafePage(
      cafePageRequest: CafePageRequest,
      options?: any
    ): AxiosPromise<CafePageResponse> {
      return localVarFp
        .putCafePage(cafePageRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CafePageApi - object-oriented interface
 * @export
 * @class CafePageApi
 * @extends {BaseAPI}
 */
export class CafePageApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CafePageApi
   */
  public deleteCafePage(options?: AxiosRequestConfig) {
    return CafePageApiFp(this.configuration)
      .deleteCafePage(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
   * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
   * @param {number} [paginationPage] Page number (default: 0)
   * @param {number} [paginationPageSize] Page size (default: 25)
   * @param {number} [paginationStart] Offset value (default: 0)
   * @param {number} [paginationLimit] Number of entities to return (default: 25)
   * @param {string} [fields] Fields to return (ex: title,author)
   * @param {string} [populate] Relations to return
   * @param {object} [filters] Filters to apply
   * @param {string} [locale] Locale to apply
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CafePageApi
   */
  public getCafePage(
    sort?: string,
    paginationWithCount?: boolean,
    paginationPage?: number,
    paginationPageSize?: number,
    paginationStart?: number,
    paginationLimit?: number,
    fields?: string,
    populate?: string,
    filters?: object,
    locale?: string,
    options?: AxiosRequestConfig
  ) {
    return CafePageApiFp(this.configuration)
      .getCafePage(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CafePageRequest} cafePageRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CafePageApi
   */
  public putCafePage(
    cafePageRequest: CafePageRequest,
    options?: AxiosRequestConfig
  ) {
    return CafePageApiFp(this.configuration)
      .putCafePage(cafePageRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ContactPageApi - axios parameter creator
 * @export
 */
export const ContactPageApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContactPage: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/contact-page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactPage: async (
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/contact-page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (paginationWithCount !== undefined) {
        localVarQueryParameter["pagination[withCount]"] = paginationWithCount;
      }

      if (paginationPage !== undefined) {
        localVarQueryParameter["pagination[page]"] = paginationPage;
      }

      if (paginationPageSize !== undefined) {
        localVarQueryParameter["pagination[pageSize]"] = paginationPageSize;
      }

      if (paginationStart !== undefined) {
        localVarQueryParameter["pagination[start]"] = paginationStart;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination[limit]"] = paginationLimit;
      }

      if (fields !== undefined) {
        localVarQueryParameter["fields"] = fields;
      }

      if (populate !== undefined) {
        localVarQueryParameter["populate"] = populate;
      }

      if (filters !== undefined) {
        localVarQueryParameter["filters"] = filters;
      }

      if (locale !== undefined) {
        localVarQueryParameter["locale"] = locale;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {ContactPageRequest} contactPageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putContactPage: async (
      contactPageRequest: ContactPageRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'contactPageRequest' is not null or undefined
      assertParamExists(
        "putContactPage",
        "contactPageRequest",
        contactPageRequest
      );
      const localVarPath = `/contact-page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        contactPageRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ContactPageApi - functional programming interface
 * @export
 */
export const ContactPageApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    ContactPageApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteContactPage(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteContactPage(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getContactPage(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ContactPageResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getContactPage(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {ContactPageRequest} contactPageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putContactPage(
      contactPageRequest: ContactPageRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ContactPageResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putContactPage(
        contactPageRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ContactPageApi - factory interface
 * @export
 */
export const ContactPageApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ContactPageApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteContactPage(options?: any): AxiosPromise<number> {
      return localVarFp
        .deleteContactPage(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContactPage(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: any
    ): AxiosPromise<ContactPageResponse> {
      return localVarFp
        .getContactPage(
          sort,
          paginationWithCount,
          paginationPage,
          paginationPageSize,
          paginationStart,
          paginationLimit,
          fields,
          populate,
          filters,
          locale,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {ContactPageRequest} contactPageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putContactPage(
      contactPageRequest: ContactPageRequest,
      options?: any
    ): AxiosPromise<ContactPageResponse> {
      return localVarFp
        .putContactPage(contactPageRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ContactPageApi - object-oriented interface
 * @export
 * @class ContactPageApi
 * @extends {BaseAPI}
 */
export class ContactPageApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactPageApi
   */
  public deleteContactPage(options?: AxiosRequestConfig) {
    return ContactPageApiFp(this.configuration)
      .deleteContactPage(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
   * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
   * @param {number} [paginationPage] Page number (default: 0)
   * @param {number} [paginationPageSize] Page size (default: 25)
   * @param {number} [paginationStart] Offset value (default: 0)
   * @param {number} [paginationLimit] Number of entities to return (default: 25)
   * @param {string} [fields] Fields to return (ex: title,author)
   * @param {string} [populate] Relations to return
   * @param {object} [filters] Filters to apply
   * @param {string} [locale] Locale to apply
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactPageApi
   */
  public getContactPage(
    sort?: string,
    paginationWithCount?: boolean,
    paginationPage?: number,
    paginationPageSize?: number,
    paginationStart?: number,
    paginationLimit?: number,
    fields?: string,
    populate?: string,
    filters?: object,
    locale?: string,
    options?: AxiosRequestConfig
  ) {
    return ContactPageApiFp(this.configuration)
      .getContactPage(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ContactPageRequest} contactPageRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ContactPageApi
   */
  public putContactPage(
    contactPageRequest: ContactPageRequest,
    options?: AxiosRequestConfig
  ) {
    return ContactPageApiFp(this.configuration)
      .putContactPage(contactPageRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * FlowerApi - axios parameter creator
 * @export
 */
export const FlowerApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFlowersId: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteFlowersId", "id", id);
      const localVarPath = `/flowers/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFlowers: async (
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/flowers`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (paginationWithCount !== undefined) {
        localVarQueryParameter["pagination[withCount]"] = paginationWithCount;
      }

      if (paginationPage !== undefined) {
        localVarQueryParameter["pagination[page]"] = paginationPage;
      }

      if (paginationPageSize !== undefined) {
        localVarQueryParameter["pagination[pageSize]"] = paginationPageSize;
      }

      if (paginationStart !== undefined) {
        localVarQueryParameter["pagination[start]"] = paginationStart;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination[limit]"] = paginationLimit;
      }

      if (fields !== undefined) {
        localVarQueryParameter["fields"] = fields;
      }

      if (populate !== undefined) {
        localVarQueryParameter["populate"] = populate;
      }

      if (filters !== undefined) {
        localVarQueryParameter["filters"] = filters;
      }

      if (locale !== undefined) {
        localVarQueryParameter["locale"] = locale;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFlowersId: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getFlowersId", "id", id);
      const localVarPath = `/flowers/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {FlowerRequest} flowerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFlowers: async (
      flowerRequest: FlowerRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'flowerRequest' is not null or undefined
      assertParamExists("postFlowers", "flowerRequest", flowerRequest);
      const localVarPath = `/flowers`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        flowerRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {FlowerRequest} flowerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putFlowersId: async (
      id: number,
      flowerRequest: FlowerRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("putFlowersId", "id", id);
      // verify required parameter 'flowerRequest' is not null or undefined
      assertParamExists("putFlowersId", "flowerRequest", flowerRequest);
      const localVarPath = `/flowers/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        flowerRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FlowerApi - functional programming interface
 * @export
 */
export const FlowerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FlowerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteFlowersId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFlowersId(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFlowers(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FlowerListResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFlowers(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFlowersId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowerResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFlowersId(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {FlowerRequest} flowerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postFlowers(
      flowerRequest: FlowerRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowerResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postFlowers(
        flowerRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {FlowerRequest} flowerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putFlowersId(
      id: number,
      flowerRequest: FlowerRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlowerResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putFlowersId(
        id,
        flowerRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * FlowerApi - factory interface
 * @export
 */
export const FlowerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = FlowerApiFp(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFlowersId(id: number, options?: any): AxiosPromise<number> {
      return localVarFp
        .deleteFlowersId(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFlowers(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: any
    ): AxiosPromise<FlowerListResponse> {
      return localVarFp
        .getFlowers(
          sort,
          paginationWithCount,
          paginationPage,
          paginationPageSize,
          paginationStart,
          paginationLimit,
          fields,
          populate,
          filters,
          locale,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFlowersId(id: number, options?: any): AxiosPromise<FlowerResponse> {
      return localVarFp
        .getFlowersId(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {FlowerRequest} flowerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFlowers(
      flowerRequest: FlowerRequest,
      options?: any
    ): AxiosPromise<FlowerResponse> {
      return localVarFp
        .postFlowers(flowerRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {FlowerRequest} flowerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putFlowersId(
      id: number,
      flowerRequest: FlowerRequest,
      options?: any
    ): AxiosPromise<FlowerResponse> {
      return localVarFp
        .putFlowersId(id, flowerRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * FlowerApi - object-oriented interface
 * @export
 * @class FlowerApi
 * @extends {BaseAPI}
 */
export class FlowerApi extends BaseAPI {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FlowerApi
   */
  public deleteFlowersId(id: number, options?: AxiosRequestConfig) {
    return FlowerApiFp(this.configuration)
      .deleteFlowersId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
   * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
   * @param {number} [paginationPage] Page number (default: 0)
   * @param {number} [paginationPageSize] Page size (default: 25)
   * @param {number} [paginationStart] Offset value (default: 0)
   * @param {number} [paginationLimit] Number of entities to return (default: 25)
   * @param {string} [fields] Fields to return (ex: title,author)
   * @param {string} [populate] Relations to return
   * @param {object} [filters] Filters to apply
   * @param {string} [locale] Locale to apply
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FlowerApi
   */
  public getFlowers(
    sort?: string,
    paginationWithCount?: boolean,
    paginationPage?: number,
    paginationPageSize?: number,
    paginationStart?: number,
    paginationLimit?: number,
    fields?: string,
    populate?: string,
    filters?: object,
    locale?: string,
    options?: AxiosRequestConfig
  ) {
    return FlowerApiFp(this.configuration)
      .getFlowers(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FlowerApi
   */
  public getFlowersId(id: number, options?: AxiosRequestConfig) {
    return FlowerApiFp(this.configuration)
      .getFlowersId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {FlowerRequest} flowerRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FlowerApi
   */
  public postFlowers(
    flowerRequest: FlowerRequest,
    options?: AxiosRequestConfig
  ) {
    return FlowerApiFp(this.configuration)
      .postFlowers(flowerRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {FlowerRequest} flowerRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FlowerApi
   */
  public putFlowersId(
    id: number,
    flowerRequest: FlowerRequest,
    options?: AxiosRequestConfig
  ) {
    return FlowerApiFp(this.configuration)
      .putFlowersId(id, flowerRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * FlowerCatalogueApi - axios parameter creator
 * @export
 */
export const FlowerCatalogueApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFlowerCataloguesId: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteFlowerCataloguesId", "id", id);
      const localVarPath = `/flower-catalogues/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFlowerCatalogues: async (
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/flower-catalogues`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (paginationWithCount !== undefined) {
        localVarQueryParameter["pagination[withCount]"] = paginationWithCount;
      }

      if (paginationPage !== undefined) {
        localVarQueryParameter["pagination[page]"] = paginationPage;
      }

      if (paginationPageSize !== undefined) {
        localVarQueryParameter["pagination[pageSize]"] = paginationPageSize;
      }

      if (paginationStart !== undefined) {
        localVarQueryParameter["pagination[start]"] = paginationStart;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination[limit]"] = paginationLimit;
      }

      if (fields !== undefined) {
        localVarQueryParameter["fields"] = fields;
      }

      if (populate !== undefined) {
        localVarQueryParameter["populate"] = populate;
      }

      if (filters !== undefined) {
        localVarQueryParameter["filters"] = filters;
      }

      if (locale !== undefined) {
        localVarQueryParameter["locale"] = locale;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFlowerCataloguesId: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getFlowerCataloguesId", "id", id);
      const localVarPath = `/flower-catalogues/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {FlowerCatalogueRequest} flowerCatalogueRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFlowerCatalogues: async (
      flowerCatalogueRequest: FlowerCatalogueRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'flowerCatalogueRequest' is not null or undefined
      assertParamExists(
        "postFlowerCatalogues",
        "flowerCatalogueRequest",
        flowerCatalogueRequest
      );
      const localVarPath = `/flower-catalogues`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        flowerCatalogueRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {FlowerCatalogueRequest} flowerCatalogueRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putFlowerCataloguesId: async (
      id: number,
      flowerCatalogueRequest: FlowerCatalogueRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("putFlowerCataloguesId", "id", id);
      // verify required parameter 'flowerCatalogueRequest' is not null or undefined
      assertParamExists(
        "putFlowerCataloguesId",
        "flowerCatalogueRequest",
        flowerCatalogueRequest
      );
      const localVarPath = `/flower-catalogues/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        flowerCatalogueRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FlowerCatalogueApi - functional programming interface
 * @export
 */
export const FlowerCatalogueApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    FlowerCatalogueApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteFlowerCataloguesId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteFlowerCataloguesId(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFlowerCatalogues(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FlowerCatalogueListResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getFlowerCatalogues(
          sort,
          paginationWithCount,
          paginationPage,
          paginationPageSize,
          paginationStart,
          paginationLimit,
          fields,
          populate,
          filters,
          locale,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFlowerCataloguesId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FlowerCatalogueResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getFlowerCataloguesId(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {FlowerCatalogueRequest} flowerCatalogueRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postFlowerCatalogues(
      flowerCatalogueRequest: FlowerCatalogueRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FlowerCatalogueResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postFlowerCatalogues(
          flowerCatalogueRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {FlowerCatalogueRequest} flowerCatalogueRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putFlowerCataloguesId(
      id: number,
      flowerCatalogueRequest: FlowerCatalogueRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FlowerCatalogueResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.putFlowerCataloguesId(
          id,
          flowerCatalogueRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * FlowerCatalogueApi - factory interface
 * @export
 */
export const FlowerCatalogueApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = FlowerCatalogueApiFp(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFlowerCataloguesId(id: number, options?: any): AxiosPromise<number> {
      return localVarFp
        .deleteFlowerCataloguesId(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFlowerCatalogues(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: any
    ): AxiosPromise<FlowerCatalogueListResponse> {
      return localVarFp
        .getFlowerCatalogues(
          sort,
          paginationWithCount,
          paginationPage,
          paginationPageSize,
          paginationStart,
          paginationLimit,
          fields,
          populate,
          filters,
          locale,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFlowerCataloguesId(
      id: number,
      options?: any
    ): AxiosPromise<FlowerCatalogueResponse> {
      return localVarFp
        .getFlowerCataloguesId(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {FlowerCatalogueRequest} flowerCatalogueRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFlowerCatalogues(
      flowerCatalogueRequest: FlowerCatalogueRequest,
      options?: any
    ): AxiosPromise<FlowerCatalogueResponse> {
      return localVarFp
        .postFlowerCatalogues(flowerCatalogueRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {FlowerCatalogueRequest} flowerCatalogueRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putFlowerCataloguesId(
      id: number,
      flowerCatalogueRequest: FlowerCatalogueRequest,
      options?: any
    ): AxiosPromise<FlowerCatalogueResponse> {
      return localVarFp
        .putFlowerCataloguesId(id, flowerCatalogueRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * FlowerCatalogueApi - object-oriented interface
 * @export
 * @class FlowerCatalogueApi
 * @extends {BaseAPI}
 */
export class FlowerCatalogueApi extends BaseAPI {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FlowerCatalogueApi
   */
  public deleteFlowerCataloguesId(id: number, options?: AxiosRequestConfig) {
    return FlowerCatalogueApiFp(this.configuration)
      .deleteFlowerCataloguesId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
   * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
   * @param {number} [paginationPage] Page number (default: 0)
   * @param {number} [paginationPageSize] Page size (default: 25)
   * @param {number} [paginationStart] Offset value (default: 0)
   * @param {number} [paginationLimit] Number of entities to return (default: 25)
   * @param {string} [fields] Fields to return (ex: title,author)
   * @param {string} [populate] Relations to return
   * @param {object} [filters] Filters to apply
   * @param {string} [locale] Locale to apply
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FlowerCatalogueApi
   */
  public getFlowerCatalogues(
    sort?: string,
    paginationWithCount?: boolean,
    paginationPage?: number,
    paginationPageSize?: number,
    paginationStart?: number,
    paginationLimit?: number,
    fields?: string,
    populate?: string,
    filters?: object,
    locale?: string,
    options?: AxiosRequestConfig
  ) {
    return FlowerCatalogueApiFp(this.configuration)
      .getFlowerCatalogues(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FlowerCatalogueApi
   */
  public getFlowerCataloguesId(id: number, options?: AxiosRequestConfig) {
    return FlowerCatalogueApiFp(this.configuration)
      .getFlowerCataloguesId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {FlowerCatalogueRequest} flowerCatalogueRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FlowerCatalogueApi
   */
  public postFlowerCatalogues(
    flowerCatalogueRequest: FlowerCatalogueRequest,
    options?: AxiosRequestConfig
  ) {
    return FlowerCatalogueApiFp(this.configuration)
      .postFlowerCatalogues(flowerCatalogueRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {FlowerCatalogueRequest} flowerCatalogueRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FlowerCatalogueApi
   */
  public putFlowerCataloguesId(
    id: number,
    flowerCatalogueRequest: FlowerCatalogueRequest,
    options?: AxiosRequestConfig
  ) {
    return FlowerCatalogueApiFp(this.configuration)
      .putFlowerCataloguesId(id, flowerCatalogueRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * FlowerPageApi - axios parameter creator
 * @export
 */
export const FlowerPageApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFlowerPage: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/flower-page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFlowerPage: async (
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/flower-page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (paginationWithCount !== undefined) {
        localVarQueryParameter["pagination[withCount]"] = paginationWithCount;
      }

      if (paginationPage !== undefined) {
        localVarQueryParameter["pagination[page]"] = paginationPage;
      }

      if (paginationPageSize !== undefined) {
        localVarQueryParameter["pagination[pageSize]"] = paginationPageSize;
      }

      if (paginationStart !== undefined) {
        localVarQueryParameter["pagination[start]"] = paginationStart;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination[limit]"] = paginationLimit;
      }

      if (fields !== undefined) {
        localVarQueryParameter["fields"] = fields;
      }

      if (populate !== undefined) {
        localVarQueryParameter["populate"] = populate;
      }

      if (filters !== undefined) {
        localVarQueryParameter["filters"] = filters;
      }

      if (locale !== undefined) {
        localVarQueryParameter["locale"] = locale;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {FlowerPageRequest} flowerPageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putFlowerPage: async (
      flowerPageRequest: FlowerPageRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'flowerPageRequest' is not null or undefined
      assertParamExists(
        "putFlowerPage",
        "flowerPageRequest",
        flowerPageRequest
      );
      const localVarPath = `/flower-page`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        flowerPageRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FlowerPageApi - functional programming interface
 * @export
 */
export const FlowerPageApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    FlowerPageApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteFlowerPage(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteFlowerPage(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFlowerPage(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FlowerPageResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFlowerPage(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {FlowerPageRequest} flowerPageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putFlowerPage(
      flowerPageRequest: FlowerPageRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FlowerPageResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putFlowerPage(
        flowerPageRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * FlowerPageApi - factory interface
 * @export
 */
export const FlowerPageApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = FlowerPageApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFlowerPage(options?: any): AxiosPromise<number> {
      return localVarFp
        .deleteFlowerPage(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFlowerPage(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: any
    ): AxiosPromise<FlowerPageResponse> {
      return localVarFp
        .getFlowerPage(
          sort,
          paginationWithCount,
          paginationPage,
          paginationPageSize,
          paginationStart,
          paginationLimit,
          fields,
          populate,
          filters,
          locale,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {FlowerPageRequest} flowerPageRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putFlowerPage(
      flowerPageRequest: FlowerPageRequest,
      options?: any
    ): AxiosPromise<FlowerPageResponse> {
      return localVarFp
        .putFlowerPage(flowerPageRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * FlowerPageApi - object-oriented interface
 * @export
 * @class FlowerPageApi
 * @extends {BaseAPI}
 */
export class FlowerPageApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FlowerPageApi
   */
  public deleteFlowerPage(options?: AxiosRequestConfig) {
    return FlowerPageApiFp(this.configuration)
      .deleteFlowerPage(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
   * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
   * @param {number} [paginationPage] Page number (default: 0)
   * @param {number} [paginationPageSize] Page size (default: 25)
   * @param {number} [paginationStart] Offset value (default: 0)
   * @param {number} [paginationLimit] Number of entities to return (default: 25)
   * @param {string} [fields] Fields to return (ex: title,author)
   * @param {string} [populate] Relations to return
   * @param {object} [filters] Filters to apply
   * @param {string} [locale] Locale to apply
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FlowerPageApi
   */
  public getFlowerPage(
    sort?: string,
    paginationWithCount?: boolean,
    paginationPage?: number,
    paginationPageSize?: number,
    paginationStart?: number,
    paginationLimit?: number,
    fields?: string,
    populate?: string,
    filters?: object,
    locale?: string,
    options?: AxiosRequestConfig
  ) {
    return FlowerPageApiFp(this.configuration)
      .getFlowerPage(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {FlowerPageRequest} flowerPageRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FlowerPageApi
   */
  public putFlowerPage(
    flowerPageRequest: FlowerPageRequest,
    options?: AxiosRequestConfig
  ) {
    return FlowerPageApiFp(this.configuration)
      .putFlowerPage(flowerPageRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * FoodApi - axios parameter creator
 * @export
 */
export const FoodApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFoodsId: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteFoodsId", "id", id);
      const localVarPath = `/foods/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoods: async (
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/foods`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (paginationWithCount !== undefined) {
        localVarQueryParameter["pagination[withCount]"] = paginationWithCount;
      }

      if (paginationPage !== undefined) {
        localVarQueryParameter["pagination[page]"] = paginationPage;
      }

      if (paginationPageSize !== undefined) {
        localVarQueryParameter["pagination[pageSize]"] = paginationPageSize;
      }

      if (paginationStart !== undefined) {
        localVarQueryParameter["pagination[start]"] = paginationStart;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination[limit]"] = paginationLimit;
      }

      if (fields !== undefined) {
        localVarQueryParameter["fields"] = fields;
      }

      if (populate !== undefined) {
        localVarQueryParameter["populate"] = populate;
      }

      if (filters !== undefined) {
        localVarQueryParameter["filters"] = filters;
      }

      if (locale !== undefined) {
        localVarQueryParameter["locale"] = locale;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoodsId: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getFoodsId", "id", id);
      const localVarPath = `/foods/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {FoodRequest} foodRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFoods: async (
      foodRequest: FoodRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'foodRequest' is not null or undefined
      assertParamExists("postFoods", "foodRequest", foodRequest);
      const localVarPath = `/foods`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        foodRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {FoodRequest} foodRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putFoodsId: async (
      id: number,
      foodRequest: FoodRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("putFoodsId", "id", id);
      // verify required parameter 'foodRequest' is not null or undefined
      assertParamExists("putFoodsId", "foodRequest", foodRequest);
      const localVarPath = `/foods/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        foodRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FoodApi - functional programming interface
 * @export
 */
export const FoodApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FoodApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteFoodsId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFoodsId(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFoods(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FoodListResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFoods(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFoodsId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoodResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFoodsId(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {FoodRequest} foodRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postFoods(
      foodRequest: FoodRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoodResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postFoods(
        foodRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {FoodRequest} foodRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putFoodsId(
      id: number,
      foodRequest: FoodRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FoodResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putFoodsId(
        id,
        foodRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * FoodApi - factory interface
 * @export
 */
export const FoodApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = FoodApiFp(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFoodsId(id: number, options?: any): AxiosPromise<number> {
      return localVarFp
        .deleteFoodsId(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoods(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: any
    ): AxiosPromise<FoodListResponse> {
      return localVarFp
        .getFoods(
          sort,
          paginationWithCount,
          paginationPage,
          paginationPageSize,
          paginationStart,
          paginationLimit,
          fields,
          populate,
          filters,
          locale,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoodsId(id: number, options?: any): AxiosPromise<FoodResponse> {
      return localVarFp
        .getFoodsId(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {FoodRequest} foodRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFoods(
      foodRequest: FoodRequest,
      options?: any
    ): AxiosPromise<FoodResponse> {
      return localVarFp
        .postFoods(foodRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {FoodRequest} foodRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putFoodsId(
      id: number,
      foodRequest: FoodRequest,
      options?: any
    ): AxiosPromise<FoodResponse> {
      return localVarFp
        .putFoodsId(id, foodRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * FoodApi - object-oriented interface
 * @export
 * @class FoodApi
 * @extends {BaseAPI}
 */
export class FoodApi extends BaseAPI {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoodApi
   */
  public deleteFoodsId(id: number, options?: AxiosRequestConfig) {
    return FoodApiFp(this.configuration)
      .deleteFoodsId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
   * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
   * @param {number} [paginationPage] Page number (default: 0)
   * @param {number} [paginationPageSize] Page size (default: 25)
   * @param {number} [paginationStart] Offset value (default: 0)
   * @param {number} [paginationLimit] Number of entities to return (default: 25)
   * @param {string} [fields] Fields to return (ex: title,author)
   * @param {string} [populate] Relations to return
   * @param {object} [filters] Filters to apply
   * @param {string} [locale] Locale to apply
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoodApi
   */
  public getFoods(
    sort?: string,
    paginationWithCount?: boolean,
    paginationPage?: number,
    paginationPageSize?: number,
    paginationStart?: number,
    paginationLimit?: number,
    fields?: string,
    populate?: string,
    filters?: object,
    locale?: string,
    options?: AxiosRequestConfig
  ) {
    return FoodApiFp(this.configuration)
      .getFoods(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoodApi
   */
  public getFoodsId(id: number, options?: AxiosRequestConfig) {
    return FoodApiFp(this.configuration)
      .getFoodsId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {FoodRequest} foodRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoodApi
   */
  public postFoods(foodRequest: FoodRequest, options?: AxiosRequestConfig) {
    return FoodApiFp(this.configuration)
      .postFoods(foodRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {FoodRequest} foodRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoodApi
   */
  public putFoodsId(
    id: number,
    foodRequest: FoodRequest,
    options?: AxiosRequestConfig
  ) {
    return FoodApiFp(this.configuration)
      .putFoodsId(id, foodRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * FoodCategoryApi - axios parameter creator
 * @export
 */
export const FoodCategoryApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFoodCategoriesId: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteFoodCategoriesId", "id", id);
      const localVarPath = `/food-categories/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoodCategories: async (
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/food-categories`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (paginationWithCount !== undefined) {
        localVarQueryParameter["pagination[withCount]"] = paginationWithCount;
      }

      if (paginationPage !== undefined) {
        localVarQueryParameter["pagination[page]"] = paginationPage;
      }

      if (paginationPageSize !== undefined) {
        localVarQueryParameter["pagination[pageSize]"] = paginationPageSize;
      }

      if (paginationStart !== undefined) {
        localVarQueryParameter["pagination[start]"] = paginationStart;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination[limit]"] = paginationLimit;
      }

      if (fields !== undefined) {
        localVarQueryParameter["fields"] = fields;
      }

      if (populate !== undefined) {
        localVarQueryParameter["populate"] = populate;
      }

      if (filters !== undefined) {
        localVarQueryParameter["filters"] = filters;
      }

      if (locale !== undefined) {
        localVarQueryParameter["locale"] = locale;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoodCategoriesId: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getFoodCategoriesId", "id", id);
      const localVarPath = `/food-categories/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {FoodCategoryRequest} foodCategoryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFoodCategories: async (
      foodCategoryRequest: FoodCategoryRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'foodCategoryRequest' is not null or undefined
      assertParamExists(
        "postFoodCategories",
        "foodCategoryRequest",
        foodCategoryRequest
      );
      const localVarPath = `/food-categories`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        foodCategoryRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {FoodCategoryRequest} foodCategoryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putFoodCategoriesId: async (
      id: number,
      foodCategoryRequest: FoodCategoryRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("putFoodCategoriesId", "id", id);
      // verify required parameter 'foodCategoryRequest' is not null or undefined
      assertParamExists(
        "putFoodCategoriesId",
        "foodCategoryRequest",
        foodCategoryRequest
      );
      const localVarPath = `/food-categories/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        foodCategoryRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FoodCategoryApi - functional programming interface
 * @export
 */
export const FoodCategoryApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    FoodCategoryApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteFoodCategoriesId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteFoodCategoriesId(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFoodCategories(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FoodCategoryListResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getFoodCategories(
          sort,
          paginationWithCount,
          paginationPage,
          paginationPageSize,
          paginationStart,
          paginationLimit,
          fields,
          populate,
          filters,
          locale,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFoodCategoriesId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FoodCategoryResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getFoodCategoriesId(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {FoodCategoryRequest} foodCategoryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postFoodCategories(
      foodCategoryRequest: FoodCategoryRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FoodCategoryResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.postFoodCategories(
          foodCategoryRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {FoodCategoryRequest} foodCategoryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putFoodCategoriesId(
      id: number,
      foodCategoryRequest: FoodCategoryRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<FoodCategoryResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.putFoodCategoriesId(
          id,
          foodCategoryRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * FoodCategoryApi - factory interface
 * @export
 */
export const FoodCategoryApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = FoodCategoryApiFp(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFoodCategoriesId(id: number, options?: any): AxiosPromise<number> {
      return localVarFp
        .deleteFoodCategoriesId(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoodCategories(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: any
    ): AxiosPromise<FoodCategoryListResponse> {
      return localVarFp
        .getFoodCategories(
          sort,
          paginationWithCount,
          paginationPage,
          paginationPageSize,
          paginationStart,
          paginationLimit,
          fields,
          populate,
          filters,
          locale,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFoodCategoriesId(
      id: number,
      options?: any
    ): AxiosPromise<FoodCategoryResponse> {
      return localVarFp
        .getFoodCategoriesId(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {FoodCategoryRequest} foodCategoryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFoodCategories(
      foodCategoryRequest: FoodCategoryRequest,
      options?: any
    ): AxiosPromise<FoodCategoryResponse> {
      return localVarFp
        .postFoodCategories(foodCategoryRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {FoodCategoryRequest} foodCategoryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putFoodCategoriesId(
      id: number,
      foodCategoryRequest: FoodCategoryRequest,
      options?: any
    ): AxiosPromise<FoodCategoryResponse> {
      return localVarFp
        .putFoodCategoriesId(id, foodCategoryRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * FoodCategoryApi - object-oriented interface
 * @export
 * @class FoodCategoryApi
 * @extends {BaseAPI}
 */
export class FoodCategoryApi extends BaseAPI {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoodCategoryApi
   */
  public deleteFoodCategoriesId(id: number, options?: AxiosRequestConfig) {
    return FoodCategoryApiFp(this.configuration)
      .deleteFoodCategoriesId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
   * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
   * @param {number} [paginationPage] Page number (default: 0)
   * @param {number} [paginationPageSize] Page size (default: 25)
   * @param {number} [paginationStart] Offset value (default: 0)
   * @param {number} [paginationLimit] Number of entities to return (default: 25)
   * @param {string} [fields] Fields to return (ex: title,author)
   * @param {string} [populate] Relations to return
   * @param {object} [filters] Filters to apply
   * @param {string} [locale] Locale to apply
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoodCategoryApi
   */
  public getFoodCategories(
    sort?: string,
    paginationWithCount?: boolean,
    paginationPage?: number,
    paginationPageSize?: number,
    paginationStart?: number,
    paginationLimit?: number,
    fields?: string,
    populate?: string,
    filters?: object,
    locale?: string,
    options?: AxiosRequestConfig
  ) {
    return FoodCategoryApiFp(this.configuration)
      .getFoodCategories(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoodCategoryApi
   */
  public getFoodCategoriesId(id: number, options?: AxiosRequestConfig) {
    return FoodCategoryApiFp(this.configuration)
      .getFoodCategoriesId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {FoodCategoryRequest} foodCategoryRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoodCategoryApi
   */
  public postFoodCategories(
    foodCategoryRequest: FoodCategoryRequest,
    options?: AxiosRequestConfig
  ) {
    return FoodCategoryApiFp(this.configuration)
      .postFoodCategories(foodCategoryRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {FoodCategoryRequest} foodCategoryRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FoodCategoryApi
   */
  public putFoodCategoriesId(
    id: number,
    foodCategoryRequest: FoodCategoryRequest,
    options?: AxiosRequestConfig
  ) {
    return FoodCategoryApiFp(this.configuration)
      .putFoodCategoriesId(id, foodCategoryRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ReviewerApi - axios parameter creator
 * @export
 */
export const ReviewerApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReviewersId: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteReviewersId", "id", id);
      const localVarPath = `/reviewers/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReviewers: async (
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/reviewers`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (sort !== undefined) {
        localVarQueryParameter["sort"] = sort;
      }

      if (paginationWithCount !== undefined) {
        localVarQueryParameter["pagination[withCount]"] = paginationWithCount;
      }

      if (paginationPage !== undefined) {
        localVarQueryParameter["pagination[page]"] = paginationPage;
      }

      if (paginationPageSize !== undefined) {
        localVarQueryParameter["pagination[pageSize]"] = paginationPageSize;
      }

      if (paginationStart !== undefined) {
        localVarQueryParameter["pagination[start]"] = paginationStart;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter["pagination[limit]"] = paginationLimit;
      }

      if (fields !== undefined) {
        localVarQueryParameter["fields"] = fields;
      }

      if (populate !== undefined) {
        localVarQueryParameter["populate"] = populate;
      }

      if (filters !== undefined) {
        localVarQueryParameter["filters"] = filters;
      }

      if (locale !== undefined) {
        localVarQueryParameter["locale"] = locale;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReviewersId: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getReviewersId", "id", id);
      const localVarPath = `/reviewers/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {ReviewerRequest} reviewerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postReviewers: async (
      reviewerRequest: ReviewerRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'reviewerRequest' is not null or undefined
      assertParamExists("postReviewers", "reviewerRequest", reviewerRequest);
      const localVarPath = `/reviewers`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        reviewerRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {ReviewerRequest} reviewerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putReviewersId: async (
      id: number,
      reviewerRequest: ReviewerRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("putReviewersId", "id", id);
      // verify required parameter 'reviewerRequest' is not null or undefined
      assertParamExists("putReviewersId", "reviewerRequest", reviewerRequest);
      const localVarPath = `/reviewers/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        reviewerRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ReviewerApi - functional programming interface
 * @export
 */
export const ReviewerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ReviewerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteReviewersId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteReviewersId(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getReviewers(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ReviewerListResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getReviewers(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getReviewersId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ReviewerResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getReviewersId(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {ReviewerRequest} reviewerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postReviewers(
      reviewerRequest: ReviewerRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ReviewerResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postReviewers(
        reviewerRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} id
     * @param {ReviewerRequest} reviewerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putReviewersId(
      id: number,
      reviewerRequest: ReviewerRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ReviewerResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putReviewersId(
        id,
        reviewerRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * ReviewerApi - factory interface
 * @export
 */
export const ReviewerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ReviewerApiFp(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReviewersId(id: number, options?: any): AxiosPromise<number> {
      return localVarFp
        .deleteReviewersId(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReviewers(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: any
    ): AxiosPromise<ReviewerListResponse> {
      return localVarFp
        .getReviewers(
          sort,
          paginationWithCount,
          paginationPage,
          paginationPageSize,
          paginationStart,
          paginationLimit,
          fields,
          populate,
          filters,
          locale,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReviewersId(id: number, options?: any): AxiosPromise<ReviewerResponse> {
      return localVarFp
        .getReviewersId(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {ReviewerRequest} reviewerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postReviewers(
      reviewerRequest: ReviewerRequest,
      options?: any
    ): AxiosPromise<ReviewerResponse> {
      return localVarFp
        .postReviewers(reviewerRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {ReviewerRequest} reviewerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putReviewersId(
      id: number,
      reviewerRequest: ReviewerRequest,
      options?: any
    ): AxiosPromise<ReviewerResponse> {
      return localVarFp
        .putReviewersId(id, reviewerRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ReviewerApi - object-oriented interface
 * @export
 * @class ReviewerApi
 * @extends {BaseAPI}
 */
export class ReviewerApi extends BaseAPI {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReviewerApi
   */
  public deleteReviewersId(id: number, options?: AxiosRequestConfig) {
    return ReviewerApiFp(this.configuration)
      .deleteReviewersId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
   * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
   * @param {number} [paginationPage] Page number (default: 0)
   * @param {number} [paginationPageSize] Page size (default: 25)
   * @param {number} [paginationStart] Offset value (default: 0)
   * @param {number} [paginationLimit] Number of entities to return (default: 25)
   * @param {string} [fields] Fields to return (ex: title,author)
   * @param {string} [populate] Relations to return
   * @param {object} [filters] Filters to apply
   * @param {string} [locale] Locale to apply
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReviewerApi
   */
  public getReviewers(
    sort?: string,
    paginationWithCount?: boolean,
    paginationPage?: number,
    paginationPageSize?: number,
    paginationStart?: number,
    paginationLimit?: number,
    fields?: string,
    populate?: string,
    filters?: object,
    locale?: string,
    options?: AxiosRequestConfig
  ) {
    return ReviewerApiFp(this.configuration)
      .getReviewers(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReviewerApi
   */
  public getReviewersId(id: number, options?: AxiosRequestConfig) {
    return ReviewerApiFp(this.configuration)
      .getReviewersId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ReviewerRequest} reviewerRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReviewerApi
   */
  public postReviewers(
    reviewerRequest: ReviewerRequest,
    options?: AxiosRequestConfig
  ) {
    return ReviewerApiFp(this.configuration)
      .postReviewers(reviewerRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {ReviewerRequest} reviewerRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReviewerApi
   */
  public putReviewersId(
    id: number,
    reviewerRequest: ReviewerRequest,
    options?: AxiosRequestConfig
  ) {
    return ReviewerApiFp(this.configuration)
      .putReviewersId(id, reviewerRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UploadFileApi - axios parameter creator
 * @export
 */
export const UploadFileApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilesGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/upload/files`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilesIdDelete: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("uploadFilesIdDelete", "id", id);
      const localVarPath = `/upload/files/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilesIdGet: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("uploadFilesIdGet", "id", id);
      const localVarPath = `/upload/files/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Upload files
     * @summary
     * @param {Array<File>} files
     * @param {string} [path] The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3).
     * @param {string} [refId] The ID of the entry which the file(s) will be linked to
     * @param {string} [ref] The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant).
     * @param {string} [field] The field of the entry which the file(s) will be precisely linked to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadPost: async (
      files: Array<File>,
      path?: string,
      refId?: string,
      ref?: string,
      field?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'files' is not null or undefined
      assertParamExists("uploadPost", "files", files);
      const localVarPath = `/upload`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (path !== undefined) {
        localVarFormParams.append("path", path as any);
      }

      if (refId !== undefined) {
        localVarFormParams.append("refId", refId as any);
      }

      if (ref !== undefined) {
        localVarFormParams.append("ref", ref as any);
      }

      if (field !== undefined) {
        localVarFormParams.append("field", field as any);
      }
      if (files) {
        files.forEach((element) => {
          localVarFormParams.append("files", element as any);
        });
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UploadFileApi - functional programming interface
 * @export
 */
export const UploadFileApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    UploadFileApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadFilesGet(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<UploadFile>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFilesGet(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadFilesIdDelete(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFile>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.uploadFilesIdDelete(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadFilesIdGet(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFile>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.uploadFilesIdGet(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Upload files
     * @summary
     * @param {Array<File>} files
     * @param {string} [path] The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3).
     * @param {string} [refId] The ID of the entry which the file(s) will be linked to
     * @param {string} [ref] The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant).
     * @param {string} [field] The field of the entry which the file(s) will be precisely linked to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadPost(
      files: Array<File>,
      path?: string,
      refId?: string,
      ref?: string,
      field?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<UploadFile>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uploadPost(
        files,
        path,
        refId,
        ref,
        field,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UploadFileApi - factory interface
 * @export
 */
export const UploadFileApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UploadFileApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilesGet(options?: any): AxiosPromise<Array<UploadFile>> {
      return localVarFp
        .uploadFilesGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilesIdDelete(id: string, options?: any): AxiosPromise<UploadFile> {
      return localVarFp
        .uploadFilesIdDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilesIdGet(id: string, options?: any): AxiosPromise<UploadFile> {
      return localVarFp
        .uploadFilesIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Upload files
     * @summary
     * @param {Array<File>} files
     * @param {string} [path] The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3).
     * @param {string} [refId] The ID of the entry which the file(s) will be linked to
     * @param {string} [ref] The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant).
     * @param {string} [field] The field of the entry which the file(s) will be precisely linked to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadPost(
      files: Array<File>,
      path?: string,
      refId?: string,
      ref?: string,
      field?: string,
      options?: any
    ): AxiosPromise<Array<UploadFile>> {
      return localVarFp
        .uploadPost(files, path, refId, ref, field, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UploadFileApi - object-oriented interface
 * @export
 * @class UploadFileApi
 * @extends {BaseAPI}
 */
export class UploadFileApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UploadFileApi
   */
  public uploadFilesGet(options?: AxiosRequestConfig) {
    return UploadFileApiFp(this.configuration)
      .uploadFilesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UploadFileApi
   */
  public uploadFilesIdDelete(id: string, options?: AxiosRequestConfig) {
    return UploadFileApiFp(this.configuration)
      .uploadFilesIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UploadFileApi
   */
  public uploadFilesIdGet(id: string, options?: AxiosRequestConfig) {
    return UploadFileApiFp(this.configuration)
      .uploadFilesIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Upload files
   * @summary
   * @param {Array<File>} files
   * @param {string} [path] The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3).
   * @param {string} [refId] The ID of the entry which the file(s) will be linked to
   * @param {string} [ref] The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant).
   * @param {string} [field] The field of the entry which the file(s) will be precisely linked to.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UploadFileApi
   */
  public uploadPost(
    files: Array<File>,
    path?: string,
    refId?: string,
    ref?: string,
    field?: string,
    options?: AxiosRequestConfig
  ) {
    return UploadFileApiFp(this.configuration)
      .uploadPost(files, path, refId, ref, field, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UsersPermissionsAuthApi - axios parameter creator
 * @export
 */
export const UsersPermissionsAuthApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Update user\'s own password
     * @param {AuthChangePasswordPostRequest} authChangePasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authChangePasswordPost: async (
      authChangePasswordPostRequest: AuthChangePasswordPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authChangePasswordPostRequest' is not null or undefined
      assertParamExists(
        "authChangePasswordPost",
        "authChangePasswordPostRequest",
        authChangePasswordPostRequest
      );
      const localVarPath = `/auth/change-password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authChangePasswordPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Confirm user email
     * @param {string} [confirmation] confirmation token received by email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authEmailConfirmationGet: async (
      confirmation?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/auth/email-confirmation`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (confirmation !== undefined) {
        localVarQueryParameter["confirmation"] = confirmation;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Send rest password email
     * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authForgotPasswordPost: async (
      authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authForgotPasswordPostRequest' is not null or undefined
      assertParamExists(
        "authForgotPasswordPost",
        "authForgotPasswordPostRequest",
        authForgotPasswordPostRequest
      );
      const localVarPath = `/auth/forgot-password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authForgotPasswordPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Returns a jwt token and user info
     * @summary Local login
     * @param {AuthLocalPostRequest} authLocalPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLocalPost: async (
      authLocalPostRequest: AuthLocalPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authLocalPostRequest' is not null or undefined
      assertParamExists(
        "authLocalPost",
        "authLocalPostRequest",
        authLocalPostRequest
      );
      const localVarPath = `/auth/local`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authLocalPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Returns a jwt token and user info
     * @summary Register a user
     * @param {AuthLocalRegisterPostRequest} authLocalRegisterPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLocalRegisterPost: async (
      authLocalRegisterPostRequest: AuthLocalRegisterPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authLocalRegisterPostRequest' is not null or undefined
      assertParamExists(
        "authLocalRegisterPost",
        "authLocalRegisterPostRequest",
        authLocalRegisterPostRequest
      );
      const localVarPath = `/auth/local/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authLocalRegisterPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Default Callback from provider auth
     * @param {string} provider Provider name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProviderCallbackGet: async (
      provider: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'provider' is not null or undefined
      assertParamExists("authProviderCallbackGet", "provider", provider);
      const localVarPath = `/auth/{provider}/callback`.replace(
        `{${"provider"}}`,
        encodeURIComponent(String(provider))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Rest user password
     * @param {AuthResetPasswordPostRequest} authResetPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authResetPasswordPost: async (
      authResetPasswordPostRequest: AuthResetPasswordPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authResetPasswordPostRequest' is not null or undefined
      assertParamExists(
        "authResetPasswordPost",
        "authResetPasswordPostRequest",
        authResetPasswordPostRequest
      );
      const localVarPath = `/auth/reset-password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authResetPasswordPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Send confirmation email
     * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authSendEmailConfirmationPost: async (
      authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authForgotPasswordPostRequest' is not null or undefined
      assertParamExists(
        "authSendEmailConfirmationPost",
        "authForgotPasswordPostRequest",
        authForgotPasswordPostRequest
      );
      const localVarPath = `/auth/send-email-confirmation`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authForgotPasswordPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Redirects to provider login before being redirect to /auth/{provider}/callback
     * @summary Login with a provider
     * @param {string} provider Provider name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectProviderGet: async (
      provider: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'provider' is not null or undefined
      assertParamExists("connectProviderGet", "provider", provider);
      const localVarPath = `/connect/{provider}`.replace(
        `{${"provider"}}`,
        encodeURIComponent(String(provider))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersPermissionsAuthApi - functional programming interface
 * @export
 */
export const UsersPermissionsAuthApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    UsersPermissionsAuthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Update user\'s own password
     * @param {AuthChangePasswordPostRequest} authChangePasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authChangePasswordPost(
      authChangePasswordPostRequest: AuthChangePasswordPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsUserRegistration>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authChangePasswordPost(
          authChangePasswordPostRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Confirm user email
     * @param {string} [confirmation] confirmation token received by email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authEmailConfirmationGet(
      confirmation?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authEmailConfirmationGet(
          confirmation,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Send rest password email
     * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authForgotPasswordPost(
      authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AuthForgotPasswordPost200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authForgotPasswordPost(
          authForgotPasswordPostRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Returns a jwt token and user info
     * @summary Local login
     * @param {AuthLocalPostRequest} authLocalPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authLocalPost(
      authLocalPostRequest: AuthLocalPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsUserRegistration>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authLocalPost(
        authLocalPostRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Returns a jwt token and user info
     * @summary Register a user
     * @param {AuthLocalRegisterPostRequest} authLocalRegisterPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authLocalRegisterPost(
      authLocalRegisterPostRequest: AuthLocalRegisterPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsUserRegistration>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authLocalRegisterPost(
          authLocalRegisterPostRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Default Callback from provider auth
     * @param {string} provider Provider name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authProviderCallbackGet(
      provider: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsUserRegistration>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authProviderCallbackGet(
          provider,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Rest user password
     * @param {AuthResetPasswordPostRequest} authResetPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authResetPasswordPost(
      authResetPasswordPostRequest: AuthResetPasswordPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsUserRegistration>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authResetPasswordPost(
          authResetPasswordPostRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Send confirmation email
     * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authSendEmailConfirmationPost(
      authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AuthSendEmailConfirmationPost200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.authSendEmailConfirmationPost(
          authForgotPasswordPostRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * Redirects to provider login before being redirect to /auth/{provider}/callback
     * @summary Login with a provider
     * @param {string} provider Provider name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async connectProviderGet(
      provider: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.connectProviderGet(provider, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UsersPermissionsAuthApi - factory interface
 * @export
 */
export const UsersPermissionsAuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UsersPermissionsAuthApiFp(configuration);
  return {
    /**
     *
     * @summary Update user\'s own password
     * @param {AuthChangePasswordPostRequest} authChangePasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authChangePasswordPost(
      authChangePasswordPostRequest: AuthChangePasswordPostRequest,
      options?: any
    ): AxiosPromise<UsersPermissionsUserRegistration> {
      return localVarFp
        .authChangePasswordPost(authChangePasswordPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Confirm user email
     * @param {string} [confirmation] confirmation token received by email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authEmailConfirmationGet(
      confirmation?: string,
      options?: any
    ): AxiosPromise<Error> {
      return localVarFp
        .authEmailConfirmationGet(confirmation, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Send rest password email
     * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authForgotPasswordPost(
      authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
      options?: any
    ): AxiosPromise<AuthForgotPasswordPost200Response> {
      return localVarFp
        .authForgotPasswordPost(authForgotPasswordPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Returns a jwt token and user info
     * @summary Local login
     * @param {AuthLocalPostRequest} authLocalPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLocalPost(
      authLocalPostRequest: AuthLocalPostRequest,
      options?: any
    ): AxiosPromise<UsersPermissionsUserRegistration> {
      return localVarFp
        .authLocalPost(authLocalPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Returns a jwt token and user info
     * @summary Register a user
     * @param {AuthLocalRegisterPostRequest} authLocalRegisterPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLocalRegisterPost(
      authLocalRegisterPostRequest: AuthLocalRegisterPostRequest,
      options?: any
    ): AxiosPromise<UsersPermissionsUserRegistration> {
      return localVarFp
        .authLocalRegisterPost(authLocalRegisterPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Default Callback from provider auth
     * @param {string} provider Provider name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProviderCallbackGet(
      provider: string,
      options?: any
    ): AxiosPromise<UsersPermissionsUserRegistration> {
      return localVarFp
        .authProviderCallbackGet(provider, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Rest user password
     * @param {AuthResetPasswordPostRequest} authResetPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authResetPasswordPost(
      authResetPasswordPostRequest: AuthResetPasswordPostRequest,
      options?: any
    ): AxiosPromise<UsersPermissionsUserRegistration> {
      return localVarFp
        .authResetPasswordPost(authResetPasswordPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Send confirmation email
     * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authSendEmailConfirmationPost(
      authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
      options?: any
    ): AxiosPromise<AuthSendEmailConfirmationPost200Response> {
      return localVarFp
        .authSendEmailConfirmationPost(authForgotPasswordPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Redirects to provider login before being redirect to /auth/{provider}/callback
     * @summary Login with a provider
     * @param {string} provider Provider name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectProviderGet(provider: string, options?: any): AxiosPromise<Error> {
      return localVarFp
        .connectProviderGet(provider, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersPermissionsAuthApi - object-oriented interface
 * @export
 * @class UsersPermissionsAuthApi
 * @extends {BaseAPI}
 */
export class UsersPermissionsAuthApi extends BaseAPI {
  /**
   *
   * @summary Update user\'s own password
   * @param {AuthChangePasswordPostRequest} authChangePasswordPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authChangePasswordPost(
    authChangePasswordPostRequest: AuthChangePasswordPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authChangePasswordPost(authChangePasswordPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Confirm user email
   * @param {string} [confirmation] confirmation token received by email
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authEmailConfirmationGet(
    confirmation?: string,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authEmailConfirmationGet(confirmation, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Send rest password email
   * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authForgotPasswordPost(
    authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authForgotPasswordPost(authForgotPasswordPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Returns a jwt token and user info
   * @summary Local login
   * @param {AuthLocalPostRequest} authLocalPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authLocalPost(
    authLocalPostRequest: AuthLocalPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authLocalPost(authLocalPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Returns a jwt token and user info
   * @summary Register a user
   * @param {AuthLocalRegisterPostRequest} authLocalRegisterPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authLocalRegisterPost(
    authLocalRegisterPostRequest: AuthLocalRegisterPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authLocalRegisterPost(authLocalRegisterPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Default Callback from provider auth
   * @param {string} provider Provider name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authProviderCallbackGet(
    provider: string,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authProviderCallbackGet(provider, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Rest user password
   * @param {AuthResetPasswordPostRequest} authResetPasswordPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authResetPasswordPost(
    authResetPasswordPostRequest: AuthResetPasswordPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authResetPasswordPost(authResetPasswordPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Send confirmation email
   * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authSendEmailConfirmationPost(
    authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authSendEmailConfirmationPost(authForgotPasswordPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Redirects to provider login before being redirect to /auth/{provider}/callback
   * @summary Login with a provider
   * @param {string} provider Provider name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public connectProviderGet(provider: string, options?: AxiosRequestConfig) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .connectProviderGet(provider, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UsersPermissionsUsersRolesApi - axios parameter creator
 * @export
 */
export const UsersPermissionsUsersRolesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Get user count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCountGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/count`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get list of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a user
     * @param {string} id user Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdDelete: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("usersIdDelete", "id", id);
      const localVarPath = `/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a user
     * @param {string} id user Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdGet: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("usersIdGet", "id", id);
      const localVarPath = `/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a user
     * @param {string} id user Id
     * @param {UsersPostRequest} usersPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdPut: async (
      id: string,
      usersPostRequest: UsersPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("usersIdPut", "id", id);
      // verify required parameter 'usersPostRequest' is not null or undefined
      assertParamExists("usersIdPut", "usersPostRequest", usersPostRequest);
      const localVarPath = `/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        usersPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get authenticated user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get default generated permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsPermissionsGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users-permissions/permissions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary List roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesGet: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users-permissions/roles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a role
     * @param {string} id role Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesIdGet: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("usersPermissionsRolesIdGet", "id", id);
      const localVarPath = `/users-permissions/roles/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a role
     * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesPost: async (
      usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'usersPermissionsRolesPostRequest' is not null or undefined
      assertParamExists(
        "usersPermissionsRolesPost",
        "usersPermissionsRolesPostRequest",
        usersPermissionsRolesPostRequest
      );
      const localVarPath = `/users-permissions/roles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        usersPermissionsRolesPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a role
     * @param {string} role role Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesRoleDelete: async (
      role: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'role' is not null or undefined
      assertParamExists("usersPermissionsRolesRoleDelete", "role", role);
      const localVarPath = `/users-permissions/roles/{role}`.replace(
        `{${"role"}}`,
        encodeURIComponent(String(role))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a role
     * @param {string} role role Id
     * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesRolePut: async (
      role: string,
      usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'role' is not null or undefined
      assertParamExists("usersPermissionsRolesRolePut", "role", role);
      // verify required parameter 'usersPermissionsRolesPostRequest' is not null or undefined
      assertParamExists(
        "usersPermissionsRolesRolePut",
        "usersPermissionsRolesPostRequest",
        usersPermissionsRolesPostRequest
      );
      const localVarPath = `/users-permissions/roles/{role}`.replace(
        `{${"role"}}`,
        encodeURIComponent(String(role))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        usersPermissionsRolesPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a user
     * @param {UsersPostRequest} usersPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPost: async (
      usersPostRequest: UsersPostRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'usersPostRequest' is not null or undefined
      assertParamExists("usersPost", "usersPostRequest", usersPostRequest);
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        usersPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersPermissionsUsersRolesApi - functional programming interface
 * @export
 */
export const UsersPermissionsUsersRolesApiFp = function (
  configuration?: Configuration
) {
  const localVarAxiosParamCreator =
    UsersPermissionsUsersRolesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get user count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersCountGet(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersCountGet(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get list of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersGet(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<UsersPermissionsUser>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete a user
     * @param {string} id user Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersIdDelete(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersIdDelete200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdDelete(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get a user
     * @param {string} id user Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersIdGet(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsUser>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update a user
     * @param {string} id user Id
     * @param {UsersPostRequest} usersPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersIdPut(
      id: string,
      usersPostRequest: UsersPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPost201Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdPut(
        id,
        usersPostRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get authenticated user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersMeGet(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsUser>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersMeGet(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get default generated permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPermissionsPermissionsGet(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsPermissionsGet200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.usersPermissionsPermissionsGet(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary List roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPermissionsRolesGet(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsRolesGet200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.usersPermissionsRolesGet(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get a role
     * @param {string} id role Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPermissionsRolesIdGet(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsRolesIdGet200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.usersPermissionsRolesIdGet(id, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create a role
     * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPermissionsRolesPost(
      usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AuthForgotPasswordPost200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.usersPermissionsRolesPost(
          usersPermissionsRolesPostRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete a role
     * @param {string} role role Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPermissionsRolesRoleDelete(
      role: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AuthForgotPasswordPost200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.usersPermissionsRolesRoleDelete(
          role,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update a role
     * @param {string} role role Id
     * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPermissionsRolesRolePut(
      role: string,
      usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AuthForgotPasswordPost200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.usersPermissionsRolesRolePut(
          role,
          usersPermissionsRolesPostRequest,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Create a user
     * @param {UsersPostRequest} usersPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPost(
      usersPostRequest: UsersPostRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPost201Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersPost(
        usersPostRequest,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UsersPermissionsUsersRolesApi - factory interface
 * @export
 */
export const UsersPermissionsUsersRolesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UsersPermissionsUsersRolesApiFp(configuration);
  return {
    /**
     *
     * @summary Get user count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCountGet(options?: any): AxiosPromise<number> {
      return localVarFp
        .usersCountGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get list of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersGet(options?: any): AxiosPromise<Array<UsersPermissionsUser>> {
      return localVarFp
        .usersGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a user
     * @param {string} id user Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdDelete(
      id: string,
      options?: any
    ): AxiosPromise<UsersIdDelete200Response> {
      return localVarFp
        .usersIdDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a user
     * @param {string} id user Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdGet(id: string, options?: any): AxiosPromise<UsersPermissionsUser> {
      return localVarFp
        .usersIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a user
     * @param {string} id user Id
     * @param {UsersPostRequest} usersPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdPut(
      id: string,
      usersPostRequest: UsersPostRequest,
      options?: any
    ): AxiosPromise<UsersPost201Response> {
      return localVarFp
        .usersIdPut(id, usersPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get authenticated user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGet(options?: any): AxiosPromise<UsersPermissionsUser> {
      return localVarFp
        .usersMeGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get default generated permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsPermissionsGet(
      options?: any
    ): AxiosPromise<UsersPermissionsPermissionsGet200Response> {
      return localVarFp
        .usersPermissionsPermissionsGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesGet(
      options?: any
    ): AxiosPromise<UsersPermissionsRolesGet200Response> {
      return localVarFp
        .usersPermissionsRolesGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a role
     * @param {string} id role Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesIdGet(
      id: string,
      options?: any
    ): AxiosPromise<UsersPermissionsRolesIdGet200Response> {
      return localVarFp
        .usersPermissionsRolesIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a role
     * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesPost(
      usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
      options?: any
    ): AxiosPromise<AuthForgotPasswordPost200Response> {
      return localVarFp
        .usersPermissionsRolesPost(usersPermissionsRolesPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a role
     * @param {string} role role Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesRoleDelete(
      role: string,
      options?: any
    ): AxiosPromise<AuthForgotPasswordPost200Response> {
      return localVarFp
        .usersPermissionsRolesRoleDelete(role, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a role
     * @param {string} role role Id
     * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesRolePut(
      role: string,
      usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
      options?: any
    ): AxiosPromise<AuthForgotPasswordPost200Response> {
      return localVarFp
        .usersPermissionsRolesRolePut(
          role,
          usersPermissionsRolesPostRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a user
     * @param {UsersPostRequest} usersPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPost(
      usersPostRequest: UsersPostRequest,
      options?: any
    ): AxiosPromise<UsersPost201Response> {
      return localVarFp
        .usersPost(usersPostRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersPermissionsUsersRolesApi - object-oriented interface
 * @export
 * @class UsersPermissionsUsersRolesApi
 * @extends {BaseAPI}
 */
export class UsersPermissionsUsersRolesApi extends BaseAPI {
  /**
   *
   * @summary Get user count
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersCountGet(options?: AxiosRequestConfig) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersCountGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get list of users
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersGet(options?: AxiosRequestConfig) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a user
   * @param {string} id user Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersIdDelete(id: string, options?: AxiosRequestConfig) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a user
   * @param {string} id user Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersIdGet(id: string, options?: AxiosRequestConfig) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a user
   * @param {string} id user Id
   * @param {UsersPostRequest} usersPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersIdPut(
    id: string,
    usersPostRequest: UsersPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersIdPut(id, usersPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get authenticated user info
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersMeGet(options?: AxiosRequestConfig) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersMeGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get default generated permissions
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersPermissionsPermissionsGet(options?: AxiosRequestConfig) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersPermissionsPermissionsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary List roles
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersPermissionsRolesGet(options?: AxiosRequestConfig) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersPermissionsRolesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a role
   * @param {string} id role Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersPermissionsRolesIdGet(id: string, options?: AxiosRequestConfig) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersPermissionsRolesIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a role
   * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersPermissionsRolesPost(
    usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersPermissionsRolesPost(usersPermissionsRolesPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a role
   * @param {string} role role Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersPermissionsRolesRoleDelete(
    role: string,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersPermissionsRolesRoleDelete(role, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a role
   * @param {string} role role Id
   * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersPermissionsRolesRolePut(
    role: string,
    usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersPermissionsRolesRolePut(
        role,
        usersPermissionsRolesPostRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a user
   * @param {UsersPostRequest} usersPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersPost(
    usersPostRequest: UsersPostRequest,
    options?: AxiosRequestConfig
  ) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersPost(usersPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
